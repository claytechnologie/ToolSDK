#!/usr/bin/env python3
# -*- coding: utf-8 -*-




def main():
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))

    import command as cmd
    """Main terminal application."""
    try:
        terminal = cmd.Terminal()  # Initializing the Terminal Class
        terminal.vRunning = True  # Setting the Terminal to Running
        terminal.vCase = False   # Auto-clear disabled by default
        
        # Display welcome message
        print(f"{terminal.BOLD}{terminal.HEADER}")
        print("╔══════════════════════════════════════════════╗")
        print("║           Welcome to C.L.A.Y Terminal       ║")
        print("║                                              ║")
        print("║  Type 'help' to see available commands      ║")
        print("║  Type 'exit' to quit the terminal           ║")
        print("╚══════════════════════════════════════════════╝")
        print(f"{terminal.ENDC}")
        
        while terminal.vRunning:
            try:
                print("")  # New line for better readability
                terminal.iFlush(terminal.vCase)  # Clear terminal if auto-clear is enabled
                
                # Get and execute background tasks
                tasks = terminal.iGetTasks()
                if tasks:
                    terminal.iExecuteUnknownTasks(tasks)
                
                # Get user input
                user_input = terminal.iGetInput()
                
                # Skip empty input
                if not user_input.strip():
                    continue
                
                # Get current stage/context
                stage = terminal.iCurrentStage()
                
                # Process the input
                result = terminal.iProcessInput(user_input, stage)
                
                # Check for exit command (legacy support)
                if terminal.ThisIsThis(user_input, "exit") or not terminal.vRunning:
                    break
                    
            except KeyboardInterrupt:
                print(f"\n{terminal.WARNING}Interrupted by user. Type 'exit' to quit.{terminal.ENDC}")
            except EOFError:
                print(f"\n{terminal.OKGREEN}Goodbye!{terminal.ENDC}")
                break
            except Exception as e:
                print(f"{terminal.FAIL}Unexpected error: {str(e)}{terminal.ENDC}")
                print(f"{terminal.WARNING}Terminal continuing...{terminal.ENDC}")
                
    except Exception as e:
        print(f"Fatal error initializing terminal: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
    
    
    
# Constructions:

# i... Commands means General API Functions (Basics, Mains, Logics)
# v... Variables means Global Variables like States, Stages and other Contextual Informations (vCurrentStage, vRunning, vStop etc.)
# w... Commands are Wrapper Functions

# this -> User Input
# tasks -> Tasks are Commands which should be executed. They are generated by the iGetTasks() Function
# stage -> Current Position in the Command-Tree. You can enter some commands like '$ ./claynow'. Now you are in the claynow stage. You can enter commands like 'help'... and the Programm will still know you are in the claynow stage
# Case -> The Case is the Permission to Clear the whole Console Output. If you set it to True, the Console will be cleared every time you enter a new command. If you set it to False, the Console will not be cleared and you can see the old output
