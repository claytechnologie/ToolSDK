{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ToolOS SDK","text":"<p>Ein leichtgewichtiges, modulares Python Framework zum Entwickeln erweiterbarer Desktop-Anwendungen mit Zero-Configuration Internationalisierung.</p> <p>A lightweight, modular Python framework for building extensible desktop applications with zero-configuration internationalization.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>\ud83c\udf0d Zero-Config Multi-Language - 7 eingebaute Sprachen (de, en, es, fr, ru, sv, tr)</li> <li>\ud83e\udde9 Vererbungsbasierte Architektur - Einfaches Erben von Engine-Klassen</li> <li>\ud83d\udd04 State Management - Integrierte State Machine f\u00fcr App-Flow</li> <li>\ud83d\udcbe Caching &amp; Temp Files - Effiziente Dateiverwaltungs-APIs</li> <li>\u2699\ufe0f Live Settings - Dynamische Konfiguration mit Live-Reload</li> <li>\ud83d\udcdd Logging System - Strukturiertes Logging mit Timestamps</li> <li>\ud83d\udce6 Mod System - Einfaches Mod/Plugin-System</li> <li>\ud83d\udee0\ufe0f Helper Classes - Utility-Klassen f\u00fcr h\u00e4ufige Aufgaben</li> </ul>"},{"location":"#der-toolos-weg-vererbung","title":"\ud83c\udfaf Der ToolOS Weg - Vererbung","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.isRunning = False\n\n    def Run(self):\n        print(self.Language.Translate(\"welcome\"))\n        self.StateMachine.SetState(self.StateMachine.MAINMENU)\n\n        while self.isRunning:\n            if self.StateMachine.IsState(self.StateMachine.MAINMENU):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(self.StateMachine.EXIT):\n                break\n\n    def ShowMainMenu(self):\n        print(self.Language.Translate(\"header\"))\n        choice = input(self.Language.Translate(\"input\"))\n        # Deine Men\u00fc-Logik hier...\n\n# So einfach geht's!\napp = MyApp()\napp.Run()\n</code></pre>"},{"location":"#multi-language-by-default","title":"\ud83c\udf0d Multi-Language by Default","text":"<p>ToolOS SDK comes with professional translations for 7 languages out of the box:</p> GermanEnglishFrench <pre><code>app.Language.Translate(\"welcome\")  # \"Willkommen im ToolOS!\"\n</code></pre> <pre><code>app.Language.Translate(\"welcome\")  # \"Welcome to ToolOS!\"\n</code></pre> <pre><code>app.Language.Translate(\"welcome\")  # \"Bienvenue dans ToolOS!\"\n</code></pre>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install toolos\n</code></pre>"},{"location":"#architektur","title":"\ud83c\udfd7\ufe0f Architektur","text":"<p>ToolOS SDK basiert auf Vererbung und modularen APIs:</p> API Beschreibung / Description Settings API \ud83d\udd27 Konfigurationsmanagement mit Live-Reload / Configuration management with live reloading Language API \ud83c\udf0d 7-Sprachen-Support mit Custom Packages / 7-language support with custom packages Cache API \ud83d\udcbe Datei-basierte Caching / File-based caching system State Machine \ud83d\udd04 App-Status-Management / Application state management Temp API \ud83d\uddc2\ufe0f Tempor\u00e4re Dateiverwaltung / Temporary file management Log API \ud83d\udcdd Strukturiertes Logging / Structured logging system Package API \ud83d\udce6 Mod-System / Package and mod management Helper Classes \ud83d\udee0\ufe0f Utility-Klassen (Coming Soon) / Utility classes"},{"location":"#modding-sdk","title":"\ud83c\udfae Modding SDK","text":"<p>Erstelle deine eigenen Mods und Erweiterungen:</p> <ul> <li>Modding Guide - \ud83e\udde9 Kompletter Guide zum Mod-Development</li> <li>Engine Vererbung - \ud83c\udfd7\ufe0f Wie du deine eigene Engine erstellst</li> <li>Mod Examples - \ud83d\udcda Real-World Mod-Beispiele</li> </ul>"},{"location":"#requirements","title":"\ud83d\udd27 Requirements","text":"<ul> <li>Python 3.12+</li> <li>Windows/Linux/macOS</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<p>Explore the full documentation:</p> <ul> <li>Getting Started Guide</li> <li>API Reference</li> <li>Examples</li> <li>Contributing</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>MIT License - see the LICENSE file for details.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Vollst\u00e4ndige API-Referenz f\u00fcr alle ToolOS SDK Komponenten.</p>"},{"location":"api-reference/#engineapi-base-class","title":"\ud83c\udfd7\ufe0f Engine.Api (Base Class)","text":"Komponente Typ Beschreibung Verf\u00fcgbare Methoden <code>self.Settings</code> ToolOS.Settings Einstellungsverwaltung <code>Global()</code>, <code>User()</code>, <code>Save()</code>, <code>LoadSettings()</code> <code>self.Language</code> ToolOS.Language Multi-Language-System <code>Translate()</code>, <code>SetLanguage()</code>, <code>AddLanguagePackage()</code> <code>self.Cache</code> ToolOS.Cache Cache-Management <code>WriteCacheFile()</code>, <code>ReadCacheFile()</code>, <code>CacheExists()</code> <code>self.StateMachine</code> ToolOS.StateMachine State-Management <code>SetState()</code>, <code>GetState()</code>, <code>IsState()</code> <code>self.Temp</code> ToolOS.Temp Tempor\u00e4re Dateien <code>WriteTempFile()</code>, <code>ReadTempFile()</code>, <code>TempExists()</code> <code>self.Log</code> ToolOS.Log Logging-System <code>WriteLog()</code>, <code>ReadLog()</code>, <code>CreateLogFile()</code> <code>self.Package</code> ToolOS.Package Package-Management <code>LoadPackage()</code>, <code>GetPackageInfo()</code>, <code>ListPackages()</code>"},{"location":"api-reference/#settings-api","title":"\u2699\ufe0f Settings API","text":"Methode Parameter R\u00fcckgabe Beschreibung <code>Global(key)</code> <code>key: str</code> <code>str</code> Globale Einstellung abrufen <code>User(key)</code> <code>key: str</code> <code>str</code> Benutzer-Einstellung abrufen <code>Save()</code> - <code>bool</code> Einstellungen speichern <code>LoadSettings()</code> - <code>dict</code> Alle Einstellungen laden <code>SetGlobal(key, value)</code> <code>key: str, value: str</code> <code>bool</code> Globale Einstellung setzen <code>SetUser(key, value)</code> <code>key: str, value: str</code> <code>bool</code> Benutzer-Einstellung setzen"},{"location":"api-reference/#settings-beispiele","title":"Settings Beispiele","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Einstellungen abrufen\n        language = self.Settings.Global(\"language\")\n        user_theme = self.Settings.User(\"theme\")\n\n        # Einstellungen setzen\n        self.Settings.SetGlobal(\"app_version\", \"1.0.0\")\n        self.Settings.SetUser(\"last_login\", \"2024-01-01\")\n        self.Settings.Save()\n</code></pre>"},{"location":"api-reference/#language-api","title":"\ud83c\udf0d Language API","text":"Methode Parameter R\u00fcckgabe Beschreibung <code>Translate(key)</code> <code>key: str</code> <code>str</code> Text \u00fcbersetzen <code>SetLanguage(lang)</code> <code>lang: str</code> <code>bool</code> Sprache wechseln <code>AddLanguagePackage(lang, file_path)</code> <code>lang: str, file_path: str</code> <code>bool</code> Sprachpaket hinzuf\u00fcgen <code>GetAvailableLanguages()</code> - <code>list</code> Verf\u00fcgbare Sprachen <code>GetCurrentLanguage()</code> - <code>str</code> Aktuelle Sprache <code>Reload()</code> - <code>bool</code> Sprachpakete neu laden"},{"location":"api-reference/#language-beispiele","title":"Language Beispiele","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Text \u00fcbersetzen\n        welcome_text = self.Language.Translate(\"welcome\")\n        menu_title = self.Language.Translate(\"main_menu\")\n\n        # Sprache wechseln\n        self.Language.SetLanguage(\"en\")\n\n        # Verf\u00fcgbare Sprachen anzeigen\n        languages = self.Language.GetAvailableLanguages()\n        print(f\"Verf\u00fcgbare Sprachen: {languages}\")\n</code></pre>"},{"location":"api-reference/#cache-api","title":"\ud83d\udcbe Cache API","text":"Methode Parameter R\u00fcckgabe Beschreibung <code>WriteCacheFile(filename, data)</code> <code>filename: str, data: str</code> <code>bool</code> Cache-Datei schreiben <code>ReadCacheFile(filename)</code> <code>filename: str</code> <code>str</code> Cache-Datei lesen <code>CacheExists(filename)</code> <code>filename: str</code> <code>bool</code> Cache-Datei existiert <code>DeleteCacheFile(filename)</code> <code>filename: str</code> <code>bool</code> Cache-Datei l\u00f6schen <code>ListCacheFiles()</code> - <code>list</code> Alle Cache-Dateien <code>ClearCache()</code> - <code>bool</code> Cache komplett leeren"},{"location":"api-reference/#cache-beispiele","title":"Cache Beispiele","text":"<pre><code>import toolos as engine\nimport json\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Daten cachen\n        user_data = {\"name\": \"John\", \"score\": 1500}\n        self.Cache.WriteCacheFile(\"user_data.json\", json.dumps(user_data))\n\n        # Daten aus Cache laden\n        if self.Cache.CacheExists(\"user_data.json\"):\n            cached_data = self.Cache.ReadCacheFile(\"user_data.json\")\n            user_data = json.loads(cached_data)\n            print(f\"Benutzername: {user_data['name']}\")\n</code></pre>"},{"location":"api-reference/#statemachine-api","title":"\ud83d\udd04 StateMachine API","text":"Methode Parameter R\u00fcckgabe Beschreibung <code>SetState(state)</code> <code>state: str</code> <code>bool</code> Zustand setzen <code>GetState()</code> - <code>str</code> Aktuellen Zustand abrufen <code>IsState(state)</code> <code>state: str</code> <code>bool</code> Zustand pr\u00fcfen <code>PreviousState()</code> - <code>str</code> Vorherigen Zustand abrufen <code>StateHistory()</code> - <code>list</code> State-Historie <code>ResetState()</code> - <code>bool</code> Zustand zur\u00fccksetzen"},{"location":"api-reference/#statemachine-beispiele","title":"StateMachine Beispiele","text":"<pre><code>import toolos as engine\n\nclass AppStates:\n    MAIN_MENU = \"main_menu\"\n    SETTINGS = \"settings\"\n    GAME = \"game\"\n    EXIT = \"exit\"\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.States = AppStates()\n\n    def Run(self):\n        self.StateMachine.SetState(self.States.MAIN_MENU)\n\n        while True:\n            current_state = self.StateMachine.GetState()\n\n            if self.StateMachine.IsState(self.States.MAIN_MENU):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(self.States.SETTINGS):\n                self.ShowSettings()\n            elif self.StateMachine.IsState(self.States.EXIT):\n                break\n</code></pre>"},{"location":"api-reference/#temp-api","title":"\ud83d\udcc4 Temp API","text":"Methode Parameter R\u00fcckgabe Beschreibung <code>WriteTempFile(filename, data)</code> <code>filename: str, data: str</code> <code>bool</code> Temp-Datei schreiben <code>ReadTempFile(filename)</code> <code>filename: str</code> <code>str</code> Temp-Datei lesen <code>TempExists(filename)</code> <code>filename: str</code> <code>bool</code> Temp-Datei existiert <code>DeleteTempFile(filename)</code> <code>filename: str</code> <code>bool</code> Temp-Datei l\u00f6schen <code>ListTempFiles()</code> - <code>list</code> Alle Temp-Dateien <code>ClearTemp()</code> - <code>bool</code> Temp-Ordner leeren"},{"location":"api-reference/#temp-beispiele","title":"Temp Beispiele","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Tempor\u00e4re Datei erstellen\n        temp_data = \"Tempor\u00e4re Verarbeitungsdaten\"\n        self.Temp.WriteTempFile(\"processing.txt\", temp_data)\n\n        # Tempor\u00e4re Datei verarbeiten\n        if self.Temp.TempExists(\"processing.txt\"):\n            data = self.Temp.ReadTempFile(\"processing.txt\")\n            # Verarbeitung...\n            self.Temp.DeleteTempFile(\"processing.txt\")\n</code></pre>"},{"location":"api-reference/#log-api","title":"\ud83d\udcdd Log API","text":"Methode Parameter R\u00fcckgabe Beschreibung <code>WriteLog(filename, message)</code> <code>filename: str, message: str</code> <code>bool</code> Log-Eintrag schreiben <code>ReadLog(filename)</code> <code>filename: str</code> <code>str</code> Log-Datei lesen <code>CreateLogFile(filename)</code> <code>filename: str</code> <code>bool</code> Log-Datei erstellen <code>LogExists(filename)</code> <code>filename: str</code> <code>bool</code> Log-Datei existiert <code>ClearLog(filename)</code> <code>filename: str</code> <code>bool</code> Log-Datei leeren <code>ListLogFiles()</code> - <code>list</code> Alle Log-Dateien"},{"location":"api-reference/#log-beispiele","title":"Log Beispiele","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Logging initialisieren\n        self.Log.CreateLogFile(\"app.log\")\n\n        # Log-Eintr\u00e4ge schreiben\n        self.Log.WriteLog(\"app.log\", \"Application started\")\n        self.Log.WriteLog(\"app.log\", \"User logged in\")\n        self.Log.WriteLog(\"error.log\", \"Database connection failed\")\n\n        # Logs auslesen\n        app_logs = self.Log.ReadLog(\"app.log\")\n        print(\"App Logs:\", app_logs)\n</code></pre>"},{"location":"api-reference/#package-api","title":"\ud83d\udce6 Package API","text":"Methode Parameter R\u00fcckgabe Beschreibung <code>LoadPackage(package_name)</code> <code>package_name: str</code> <code>object</code> Package laden <code>GetPackageInfo(package_name)</code> <code>package_name: str</code> <code>dict</code> Package-Informationen <code>ListPackages()</code> - <code>list</code> Alle Packages <code>PackageExists(package_name)</code> <code>package_name: str</code> <code>bool</code> Package existiert <code>ReloadPackage(package_name)</code> <code>package_name: str</code> <code>bool</code> Package neu laden <code>UnloadPackage(package_name)</code> <code>package_name: str</code> <code>bool</code> Package entladen"},{"location":"api-reference/#package-beispiele","title":"Package Beispiele","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Package laden\n        shopping_mod = self.Package.LoadPackage(\"Shopping\")\n        task_manager = self.Package.LoadPackage(\"TaskManager\")\n\n        # Package-Informationen abrufen\n        package_info = self.Package.GetPackageInfo(\"Shopping\")\n        print(f\"Package: {package_info['name']} v{package_info['version']}\")\n\n        # Alle verf\u00fcgbaren Packages\n        packages = self.Package.ListPackages()\n        for package in packages:\n            print(f\"- {package}\")\n</code></pre>"},{"location":"api-reference/#vollstandiges-app-beispiel","title":"\ud83d\ude80 Vollst\u00e4ndiges App-Beispiel","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # App-spezifische Initialisierung\n        self.AppName = \"My ToolOS App\"\n        self.Version = \"1.0.0\"\n\n        # Logging initialisieren\n        self.Log.CreateLogFile(\"app.log\")\n        self.Log.WriteLog(\"app.log\", f\"{self.AppName} v{self.Version} started\")\n\n        # Standard-Konfiguration laden/erstellen\n        self.InitializeConfig()\n\n    def InitializeConfig(self):\n        \"\"\"App-Konfiguration initialisieren\"\"\"\n        if not self.Cache.CacheExists(\"app_config.json\"):\n            import json\n            default_config = {\n                \"theme\": \"dark\",\n                \"auto_save\": True,\n                \"notifications\": True\n            }\n            self.Cache.WriteCacheFile(\"app_config.json\", json.dumps(default_config))\n\n    def Run(self):\n        \"\"\"Haupt-App-Loop\"\"\"\n        while True:\n            if self.StateMachine.IsState(\"main_menu\"):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(\"exit\"):\n                self.Cleanup()\n                break\n\n    def ShowMainMenu(self):\n        \"\"\"Hauptmen\u00fc anzeigen\"\"\"\n        print(self.Language.Translate(\"welcome\"))\n        # Menu-Logik...\n\n    def Cleanup(self):\n        \"\"\"App beenden und aufr\u00e4umen\"\"\"\n        self.Log.WriteLog(\"app.log\", f\"{self.AppName} shutting down\")\n        self.Temp.ClearTemp()  # Tempor\u00e4re Dateien l\u00f6schen\n\nif __name__ == \"__main__\":\n    app = MyApp()\n    app.Run()\n</code></pre>"},{"location":"api-reference/#error-handling","title":"\ud83c\udfaf Error Handling","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def SafeOperation(self):\n        try:\n            # Kritische Operation\n            data = self.Cache.ReadCacheFile(\"important_data.json\")\n            result = self.ProcessData(data)\n            return result\n\n        except FileNotFoundError:\n            self.Log.WriteLog(\"error.log\", \"Important data file not found\")\n            return None\n\n        except Exception as e:\n            self.Log.WriteLog(\"error.log\", f\"Unexpected error: {str(e)}\")\n            return None\n\n    def ProcessData(self, data):\n        # Datenverarbeitung\n        pass\n</code></pre>"},{"location":"api-reference/#performance-tips","title":"\ud83d\udcca Performance Tips","text":"<ol> <li>Cache nutzen: H\u00e4ufig verwendete Daten cachen</li> <li>Logs optimieren: Nicht zu detailliert loggen</li> <li>Temp Files: Gro\u00dfe Daten tempor\u00e4r speichern</li> <li>State Management: Saubere State-\u00dcberg\u00e4nge</li> <li>Language Loading: Sprachen nur bei Bedarf laden</li> <li>Package Loading: Packages lazy laden</li> </ol>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to ToolOS SDK! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally</li> <li>Create a feature branch from <code>main</code></li> <li>Make your changes and test them</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/#development-setup","title":"\ud83d\udccb Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12+</li> <li>Git</li> <li>Code editor (VS Code recommended)</li> </ul>"},{"location":"contributing/#local-development","title":"Local Development","text":"<pre><code># Clone your fork\ngit clone https://github.com/yourusername/ToolSDK.git\ncd ToolSDK\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# or\nvenv\\Scripts\\activate  # Windows\n\n# Install development dependencies\npip install -e .\npip install pytest black flake8 mypy\n</code></pre>"},{"location":"contributing/#areas-for-contribution","title":"\ud83c\udfaf Areas for Contribution","text":""},{"location":"contributing/#high-priority","title":"High Priority","text":"<ul> <li>New Language Support: Add translations for additional languages</li> <li>API Improvements: Enhance existing APIs with new features</li> <li>Documentation: Improve code documentation and examples</li> <li>Testing: Add unit tests and integration tests</li> </ul>"},{"location":"contributing/#medium-priority","title":"Medium Priority","text":"<ul> <li>Performance: Optimize file I/O operations</li> <li>Error Handling: Improve error messages and handling</li> <li>Examples: Create more real-world examples</li> <li>Bug Fixes: Address reported issues</li> </ul>"},{"location":"contributing/#low-priority","title":"Low Priority","text":"<ul> <li>Code Style: Improve code formatting and structure</li> <li>Type Hints: Add comprehensive type annotations</li> <li>Refactoring: Clean up legacy code</li> </ul>"},{"location":"contributing/#contribution-guidelines","title":"\ud83d\udcdd Contribution Guidelines","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow Python PEP 8 standards:</p> <pre><code># Format code with black\nblack toolos/\n\n# Check style with flake8\nflake8 toolos/\n\n# Type checking with mypy\nmypy toolos/\n</code></pre>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Use clear, descriptive commit messages:</p> <pre><code>feat: add Swedish language support\nfix: resolve cache file encoding issue\ndocs: update API reference for LanguageAPI\ntest: add unit tests for StateMachineAPI\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create descriptive PR title: Clearly state what the PR does</li> <li>Fill out PR template: Provide context and testing details</li> <li>Link related issues: Reference any related GitHub issues</li> <li>Request review: Ask for review from maintainers</li> <li>Address feedback: Respond to review comments promptly</li> </ol>"},{"location":"contributing/#adding-new-languages","title":"\ud83c\udf0d Adding New Languages","text":"<p>To add support for a new language:</p>"},{"location":"contributing/#1-create-language-file","title":"1. Create Language File","text":"<p>Create <code>data/assets/manager/lang/{language_code}.json</code>:</p> <pre><code>{\n  \"welcome\": \"Welcome to ToolOS!\",\n  \"settings\": \"Settings\", \n  \"exit\": \"Exit\",\n  \"save\": \"Save\",\n  \"cancel\": \"Cancel\",\n  // ... add all 260+ terms\n}\n</code></pre>"},{"location":"contributing/#2-test-translation","title":"2. Test Translation","text":"<pre><code># Test your translation\nfrom toolos.api import Api\n\napi = Api(\"settings.json\")\n# Change language to your new language code\napi.Settings.LANGUAGE = \"your_lang_code\"\napi.Language.Reload()\n\n# Test translations\nprint(api.Language.Translate(\"welcome\"))\n</code></pre>"},{"location":"contributing/#3-update-documentation","title":"3. Update Documentation","text":"<ul> <li>Add language to supported languages list</li> <li>Update examples with new language</li> <li>Add to README.md</li> </ul>"},{"location":"contributing/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_language_api.py\n\n# Run with coverage\npytest --cov=toolos\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<p>Create tests in the <code>tests/</code> directory:</p> <pre><code>import pytest\nfrom toolos.api import LanguageAPI, SettingsAPI\n\ndef test_language_translation():\n    settings = SettingsAPI(\"test_settings.json\")\n    language = LanguageAPI(settings)\n\n    # Test basic translation\n    result = language.Translate(\"welcome\")\n    assert result != \"welcome\"  # Should be translated\n\n    # Test fallback\n    result = language.Translate(\"nonexistent_key\")\n    assert result == \"nonexistent_key\"\n</code></pre>"},{"location":"contributing/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"contributing/#code-documentation","title":"Code Documentation","text":"<p>Use clear docstrings for all public methods:</p> <pre><code>def Translate(self, key: str) -&gt; str:\n    \"\"\"\n    Translates a key to the current language.\n\n    Args:\n        key: The translation key to look up\n\n    Returns:\n        The translated text, or the key itself if not found\n\n    Example:\n        &gt;&gt;&gt; lang.Translate(\"welcome\")\n        \"Welcome to ToolOS!\"\n    \"\"\"\n    return self.language_data.get(key, key)\n</code></pre>"},{"location":"contributing/#api-documentation","title":"API Documentation","text":"<p>Update relevant documentation files:</p> <ul> <li>API reference pages in <code>docs/docs/api/</code></li> <li>Examples in <code>docs/docs/examples.md</code></li> <li>Getting started guide</li> </ul>"},{"location":"contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<p>When reporting bugs, include:</p> <ol> <li>Python version and operating system</li> <li>ToolOS SDK version</li> <li>Minimal code example that reproduces the issue</li> <li>Expected vs actual behavior</li> <li>Full error traceback if applicable</li> </ol> <p>Use this template:</p> <p><pre><code>## Bug Description\nBrief description of the issue\n\n## Environment\n- Python version: 3.12.0\n- ToolOS SDK version: 1.3.2\n- OS: Windows 11 / Ubuntu 22.04 / macOS 14\n\n## Steps to Reproduce\n1. Step one\n2. Step two\n3. Issue occurs\n\n## Expected Behavior\nWhat should happen\n\n## Actual Behavior\nWhat actually happens\n\n## Code Example\n```python\n# Minimal code that reproduces the issue\n</code></pre> ```</p>"},{"location":"contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<p>Before submitting feature requests:</p> <ol> <li>Check existing issues to avoid duplicates</li> <li>Provide clear use case explaining why the feature is needed</li> <li>Consider implementation and suggest possible approaches</li> <li>Think about backwards compatibility</li> </ol>"},{"location":"contributing/#license","title":"\ud83d\udcc4 License","text":"<p>By contributing to ToolOS SDK, you agree that your contributions will be licensed under the same MIT License that covers the project.</p>"},{"location":"contributing/#community","title":"\ud83e\udd1d Community","text":"<ul> <li>GitHub Discussions: For questions and general discussion</li> <li>Issues: For bug reports and feature requests</li> <li>Pull Requests: For code contributions</li> </ul>"},{"location":"contributing/#getting-help","title":"\ud83d\udcde Getting Help","text":"<p>Need help with contributing?</p> <ul> <li>Check the documentation</li> <li>Look at existing issues and PRs for examples</li> <li>Ask questions in GitHub Discussions</li> <li>Contact maintainers through GitHub</li> </ul> <p>Thank you for contributing to ToolOS SDK! \ud83c\udf89</p>"},{"location":"examples/","title":"Examples","text":"<p>This page contains practical examples showing how to use ToolOS SDK in real-world scenarios.</p>"},{"location":"examples/#complete-application-example","title":"Complete Application Example","text":"<pre><code>import json\nfrom toolos.api import Api\n\nclass TaskManager:\n    def __init__(self):\n        self.api = Api(\"settings.json\")\n        self.tasks = []\n        self.load_tasks()\n\n    def load_tasks(self):\n        \"\"\"Load tasks from cache\"\"\"\n        if self.api.Cache.CacheExists(\"tasks.json\"):\n            data = self.api.Cache.ReadCacheFile(\"tasks.json\")\n            self.tasks = json.loads(data)\n            self.api.Log.WriteLog(\"app.log\", f\"Loaded {len(self.tasks)} tasks\")\n\n    def save_tasks(self):\n        \"\"\"Save tasks to cache\"\"\"\n        data = json.dumps(self.tasks, indent=2)\n        self.api.Cache.WriteCacheFile(\"tasks.json\", data)\n        self.api.Log.WriteLog(\"app.log\", \"Tasks saved\")\n\n    def run(self):\n        \"\"\"Main application loop\"\"\"\n        print(self.api.Language.Translate(\"welcome\"))\n        self.api.StateMachine.SetState(self.api.StateMachine.MAINMENU)\n\n        while True:\n            # Check for settings updates\n            if self.api.Settings.CheckIfUpdate():\n                self.api.Settings.Update()\n                self.api.Language.Reload()\n                print(self.api.Language.Translate(\"settings_updated\"))\n\n            # State machine logic\n            if self.api.StateMachine.IsState(self.api.StateMachine.MAINMENU):\n                choice = self.show_menu()\n                self.handle_choice(choice)\n            elif self.api.StateMachine.IsState(self.api.StateMachine.EXIT):\n                break\n\n        self.cleanup()\n\n    def show_menu(self):\n        \"\"\"Display main menu\"\"\"\n        print(\"\\n\" + \"=\"*30)\n        print(self.api.Language.Translate(\"task_manager\"))\n        print(\"=\"*30)\n\n        options = [\n            \"add_task\",\n            \"list_tasks\", \n            \"complete_task\",\n            \"settings\",\n            \"exit\"\n        ]\n\n        for i, option in enumerate(options, 1):\n            print(f\"{i}. {self.api.Language.Translate(option)}\")\n\n        try:\n            choice = int(input(self.api.Language.Translate(\"input_prompt\")))\n            return choice\n        except ValueError:\n            print(self.api.Language.Translate(\"invalid_input\"))\n            return 0\n\n    def handle_choice(self, choice):\n        \"\"\"Handle menu selection\"\"\"\n        if choice == 1:\n            self.add_task()\n        elif choice == 2:\n            self.list_tasks()\n        elif choice == 3:\n            self.complete_task()\n        elif choice == 4:\n            self.settings_menu()\n        elif choice == 5:\n            self.api.StateMachine.SetState(self.api.StateMachine.EXIT)\n        else:\n            print(self.api.Language.Translate(\"invalid_option\"))\n\n    def add_task(self):\n        \"\"\"Add new task\"\"\"\n        title = input(self.api.Language.Translate(\"enter_task_title\"))\n        task = {\n            \"id\": len(self.tasks) + 1,\n            \"title\": title,\n            \"completed\": False,\n            \"created\": datetime.now().isoformat()\n        }\n        self.tasks.append(task)\n        self.save_tasks()\n        print(self.api.Language.Translate(\"task_added\"))\n\n    def cleanup(self):\n        \"\"\"Cleanup before exit\"\"\"\n        self.api.Temp.RemoveTempFile()  # Clean temp files\n        self.api.Log.WriteLog(\"app.log\", \"Application closed\")\n        print(self.api.Language.Translate(\"goodbye\"))\n\nif __name__ == \"__main__\":\n    app = TaskManager()\n    app.run()\n</code></pre>"},{"location":"examples/#multi-language-settings-manager","title":"Multi-Language Settings Manager","text":"<pre><code>from toolos.api import Api\n\nclass LanguageManager:\n    def __init__(self):\n        self.api = Api(\"settings.json\")\n\n    def show_language_menu(self):\n        \"\"\"Display available languages\"\"\"\n        languages = self.api.Language.GetAvailableLanguages()\n\n        print(self.api.Language.Translate(\"select_language\"))\n        for i, lang in enumerate(languages, 1):\n            current = \" *\" if lang == self.api.Settings.LANGUAGE else \"\"\n            print(f\"{i}. {self.get_language_name(lang)}{current}\")\n\n    def get_language_name(self, code):\n        \"\"\"Get display name for language code\"\"\"\n        names = {\n            'de': 'Deutsch',\n            'en': 'English', \n            'es': 'Espa\u00f1ol',\n            'fr': 'Fran\u00e7ais',\n            'ru': '\u0420\u0443\u0441\u0441\u043a\u0438\u0439',\n            'sv': 'Svenska',\n            'tr': 'T\u00fcrk\u00e7e'\n        }\n        return names.get(code, code)\n\n    def change_language(self, new_lang):\n        \"\"\"Change application language\"\"\"\n        old_lang = self.api.Settings.LANGUAGE\n\n        # Update settings\n        self.api.Settings.LANGUAGE = new_lang\n        self.api.Settings.SetUpdate()\n\n        # Reload language\n        self.api.Language.Reload()\n\n        # Log change\n        self.api.Log.WriteLog(\"language.log\", \n            f\"Language changed: {old_lang} -&gt; {new_lang}\")\n\n        print(self.api.Language.Translate(\"language_changed\"))\n</code></pre>"},{"location":"examples/#caching-system-example","title":"Caching System Example","text":"<pre><code>import json\nimport time\nfrom toolos.api import Api\n\nclass DataCache:\n    def __init__(self):\n        self.api = Api(\"settings.json\")\n        self.cache_timeout = 300  # 5 minutes\n\n    def get_cached_data(self, cache_key):\n        \"\"\"Get data from cache with timeout check\"\"\"\n        cache_file = f\"{cache_key}.json\"\n\n        if not self.api.Cache.CacheExists(cache_file):\n            return None\n\n        try:\n            data = self.api.Cache.ReadCacheFile(cache_file)\n            cached = json.loads(data)\n\n            # Check if cache is expired\n            if time.time() - cached['timestamp'] &gt; self.cache_timeout:\n                self.api.Cache.RemoveCacheFile(cache_file)\n                return None\n\n            return cached['data']\n        except (json.JSONDecodeError, KeyError):\n            return None\n\n    def set_cached_data(self, cache_key, data):\n        \"\"\"Store data in cache with timestamp\"\"\"\n        cache_file = f\"{cache_key}.json\"\n        cached = {\n            'timestamp': time.time(),\n            'data': data\n        }\n\n        self.api.Cache.WriteCacheFile(cache_file, json.dumps(cached))\n        self.api.Log.WriteLog(\"cache.log\", f\"Cached data: {cache_key}\")\n\n    def expensive_operation(self, params):\n        \"\"\"Simulate expensive operation with caching\"\"\"\n        cache_key = f\"operation_{hash(str(params))}\"\n\n        # Try to get from cache first\n        cached_result = self.get_cached_data(cache_key)\n        if cached_result:\n            self.api.Log.WriteLog(\"cache.log\", f\"Cache hit: {cache_key}\")\n            return cached_result\n\n        # Perform expensive operation\n        self.api.Log.WriteLog(\"cache.log\", f\"Cache miss: {cache_key}\")\n        result = self.simulate_work(params)\n\n        # Cache the result\n        self.set_cached_data(cache_key, result)\n        return result\n\n    def simulate_work(self, params):\n        \"\"\"Simulate time-consuming work\"\"\"\n        time.sleep(2)  # Simulate processing time\n        return f\"Result for {params}\"\n</code></pre>"},{"location":"examples/#state-machine-workflow","title":"State Machine Workflow","text":"<pre><code>from toolos.api import Api\n\nclass WizardApp:\n    def __init__(self):\n        self.api = Api(\"settings.json\")\n        self.user_data = {}\n\n    def run(self):\n        \"\"\"Run wizard with state machine\"\"\"\n        while True:\n            current_state = self.api.StateMachine.GetState()\n\n            if self.api.StateMachine.IsState(self.api.StateMachine.FIRST_ENTRY):\n                self.welcome_step()\n                self.api.StateMachine.SetState(self.api.StateMachine.STEP_1)\n\n            elif self.api.StateMachine.IsState(self.api.StateMachine.STEP_1):\n                if self.personal_info_step():\n                    self.api.StateMachine.SetState(self.api.StateMachine.STEP_2)\n\n            elif self.api.StateMachine.IsState(self.api.StateMachine.STEP_2):\n                if self.preferences_step():\n                    self.api.StateMachine.SetState(self.api.StateMachine.STEP_3)\n\n            elif self.api.StateMachine.IsState(self.api.StateMachine.STEP_3):\n                self.confirmation_step()\n                self.api.StateMachine.SetState(self.api.StateMachine.EXIT)\n\n            elif self.api.StateMachine.IsState(self.api.StateMachine.EXIT):\n                break\n\n    def welcome_step(self):\n        \"\"\"Welcome screen\"\"\"\n        print(self.api.Language.Translate(\"setup_wizard\"))\n        print(self.api.Language.Translate(\"welcome_message\"))\n        input(self.api.Language.Translate(\"press_enter\"))\n\n    def personal_info_step(self):\n        \"\"\"Collect personal information\"\"\"\n        print(f\"\\n{self.api.Language.Translate('step')} 1: {self.api.Language.Translate('personal_info')}\")\n\n        name = input(self.api.Language.Translate(\"enter_name\"))\n        if not name:\n            return False\n\n        self.user_data['name'] = name\n        self.api.Log.WriteLog(\"wizard.log\", f\"Name entered: {name}\")\n        return True\n\n    def preferences_step(self):\n        \"\"\"Collect preferences\"\"\"\n        print(f\"\\n{self.api.Language.Translate('step')} 2: {self.api.Language.Translate('preferences')}\")\n\n        # Language selection\n        self.show_language_options()\n        return True\n\n    def confirmation_step(self):\n        \"\"\"Show confirmation and save\"\"\"\n        print(f\"\\n{self.api.Language.Translate('step')} 3: {self.api.Language.Translate('confirmation')}\")\n\n        # Save user data\n        self.api.Cache.WriteCacheFile(\"user_profile.json\", \n                                     json.dumps(self.user_data, indent=2))\n\n        print(self.api.Language.Translate(\"setup_complete\"))\n        self.api.Log.WriteLog(\"wizard.log\", \"Setup wizard completed\")\n</code></pre>"},{"location":"examples/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<pre><code>from toolos.api import Api\nimport json\n\nclass RobustApp:\n    def __init__(self):\n        try:\n            self.api = Api(\"settings.json\")\n        except FileNotFoundError:\n            print(\"Settings file not found, creating default...\")\n            self.create_default_settings()\n            self.api = Api(\"settings.json\")\n        except json.JSONDecodeError:\n            print(\"Invalid settings file format\")\n            raise\n\n    def create_default_settings(self):\n        \"\"\"Create default settings file\"\"\"\n        default_settings = {\n            \"version\": \"1.0.0\",\n            \"language\": \"en\",\n            \"mods_enabled\": False,\n            \"cachepath\": \"data/cache\",\n            \"temppath\": \"data/temp\", \n            \"logpath\": \"data/logs\",\n            \"languagepath\": \"data/lang\"\n        }\n\n        with open(\"settings.json\", 'w') as f:\n            json.dump(default_settings, f, indent=2)\n\n    def safe_cache_operation(self, filename, data=None):\n        \"\"\"Safely perform cache operations\"\"\"\n        try:\n            if data:\n                self.api.Cache.WriteCacheFile(filename, data)\n                return True\n            else:\n                if self.api.Cache.CacheExists(filename):\n                    return self.api.Cache.ReadCacheFile(filename)\n                return None\n        except (IOError, OSError) as e:\n            self.api.Log.WriteLog(\"error.log\", f\"Cache error: {e}\")\n            return None\n\n    def safe_translation(self, key, fallback=None):\n        \"\"\"Get translation with fallback\"\"\"\n        try:\n            translation = self.api.Language.Translate(key)\n            return translation if translation != key else (fallback or key)\n        except Exception as e:\n            self.api.Log.WriteLog(\"error.log\", f\"Translation error: {e}\")\n            return fallback or key\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with ToolOS SDK and build your first application.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install ToolOS SDK via pip:</p> <pre><code>pip install toolos\n</code></pre>"},{"location":"getting-started/#your-first-toolos-application","title":"Your First ToolOS Application","text":""},{"location":"getting-started/#1-create-a-settings-file","title":"1. Create a Settings File","text":"<p>First, create a <code>settings.json</code> file to configure your application:</p> <pre><code>{\n  \"version\": \"1.0.0\",\n  \"language\": \"en\",\n  \"mods_enabled\": true,\n  \"cachepath\": \"data/cache\",\n  \"temppath\": \"data/temp\",\n  \"logpath\": \"data/logs\",\n  \"languagepath\": \"data/lang\"\n}\n</code></pre>"},{"location":"getting-started/#2-basic-application-structure","title":"2. Basic Application Structure","text":"<p>Create your main application file:</p> <pre><code># app.py\nimport toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.isRunning = False\n\n    def Run(self):\n        # Welcome message in current language  \n        welcome = self.Language.Translate(\"welcome\")\n        print(welcome)\n\n        # Set application state\n        self.StateMachine.SetState(self.StateMachine.MAINMENU)\n\n        # Log application start\n        self.Log.WriteLog(\"app.log\", \"Application started\")\n\n        # Cache some data\n        self.Cache.WriteCacheFile(\"session.txt\", \"Session started\")\n\n        while self.isRunning:\n            if self.StateMachine.IsState(self.StateMachine.MAINMENU):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(self.StateMachine.EXIT):\n                break\n\n    def ShowMainMenu(self):\n        print(\"=== \" + self.Language.Translate(\"header\") + \" ===\")\n        print(\"1. \" + self.Language.Translate(\"settings\"))\n        print(\"2. \" + self.Language.Translate(\"exit\"))\n\n        choice = input(self.Language.Translate(\"input\"))\n        if choice == \"2\":\n            self.StateMachine.SetState(self.StateMachine.EXIT)\n\n        # Log application start\n        self.Log.WriteLog(\"app.log\", \"Application started\")\n\n        # Cache some data\n        self.Cache.WriteCacheFile(\"session.txt\", \"Session started\")\n\nif __name__ == \"__main__\":\n    app = MyApp()\n    app.run()\n</code></pre>"},{"location":"getting-started/#3-multi-language-support","title":"3. Multi-Language Support","text":"<p>ToolOS SDK includes built-in translations for 7 languages. To use them: ToolOS also includes an own package system for custom translations.</p> <pre><code># Get available languages\nlanguages = self.Language.GetAvailableLanguages()\nprint(f\"Available languages: {languages}\")\n\n\n# Add custom language package.  For example 'add_to_cart' translation\nself.Language.AddLanguagePackage(lang=\"en\", path=\"en_extra_translations.json\")\nself.Language.AddLanguagePackage(lang=\"de\", path=\"de_extra_translations.json\")\nself.Language.Reload()\n\n# Translate text\ngreeting = self.Language.Translate(\"welcome\")\nsettings = self.Language.Translate(\"settings\")\nexit_msg = self.Language.Translate(\"add_to_cart\")  # From custom package\n</code></pre>"},{"location":"getting-started/#4-state-management","title":"4. State Management","text":"<p>Use the state machine to control application flow:</p> <pre><code># Define application states\nif self.StateMachine.IsState(self.StateMachine.FIRST_ENTRY):\n    # First time running\n    self.setup_application()\n    self.StateMachine.SetState(self.StateMachine.MAINMENU)\n\nelif self.StateMachine.IsState(self.StateMachine.MAINMENU):\n    # Show main menu\n    self.show_main_menu()\n\nelif self.StateMachine.IsState(self.StateMachine.EXIT):\n    # Exit application\n    self.cleanup_and_exit()\n</code></pre>"},{"location":"getting-started/#5-settings-management","title":"5. Settings Management","text":"<p>Handle dynamic settings changes:</p> <pre><code># Check if settings were updated\nif self.Settings.CheckIfUpdate():\n    # Reload settings\n    self.Settings.Update()\n\n    # Reload language if changed\n    self.Language.Reload()\n\n    print(self.Language.Translate(\"settings_updated\"))\n</code></pre>"},{"location":"getting-started/#advanced-features","title":"Advanced Features","text":""},{"location":"getting-started/#custom-language-packages","title":"Custom Language Packages","text":"<p>Add custom translations for your application:</p> <pre><code># Add custom language package\nself.Language.AddLanguagePackage(\"en\", \"my_translations.json\")\n</code></pre>"},{"location":"getting-started/#caching-system","title":"Caching System","text":"<p>Efficiently manage temporary data:</p> <pre><code># Write cache file\nself.Cache.WriteCacheFile(\"user_prefs.json\", json.dumps(preferences))\n\n# Read cache file\nif self.Cache.CacheExists(\"user_prefs.json\"):\n    data = self.Cache.ReadCacheFile(\"user_prefs.json\")\n    preferences = json.loads(data)\n</code></pre>"},{"location":"getting-started/#logging","title":"Logging","text":"<p>Keep track of application events:</p> <pre><code># Log different types of events\nself.Log.WriteLog(\"app.log\", \"User logged in\")\nself.Log.WriteLog(\"error.log\", f\"Error: {str(exception)}\")\nself.Log.WriteLog(\"debug.log\", f\"Processing item {item_id}\")\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference for detailed documentation</li> <li>Check out Examples for more complex use cases</li> <li>Learn about creating mods and extensions</li> <li>Read the Contributing Guide to contribute to ToolOS SDK</li> </ul>"},{"location":"getting-started/#best-practices","title":"Best Practices","text":"<ol> <li>Always initialize with settings file: Use a proper <code>settings.json</code> configuration</li> <li>Handle language changes: Implement <code>Language.Reload()</code> for dynamic language switching</li> <li>Use state machine: Organize your application flow with the built-in state machine</li> <li>Log important events: Use the logging system for debugging and monitoring</li> <li>Clean up temporary files: Use <code>Temp.RemoveTempFile()</code> to manage temporary data</li> </ol>"},{"location":"api/cache/","title":"Cache API","text":"<p>The Cache API provides file-based caching for temporary data storage with automatic directory management.</p>"},{"location":"api/cache/#class-reference","title":"Class Reference","text":""},{"location":"api/cache/#toolos.api.CacheAPI","title":"<code>toolos.api.CacheAPI</code>","text":""},{"location":"api/cache/#basic-usage","title":"Basic Usage","text":"<pre><code>from toolos.api import CacheAPI\n\n# Initialize with cache directory\ncache = CacheAPI(\"data/cache\")\n\n# Write cache file\ncache.WriteCacheFile(\"user_data.json\", json.dumps(data))\n\n# Read cache file\nif cache.CacheExists(\"user_data.json\"):\n    data = cache.ReadCacheFile(\"user_data.json\")\n    user_data = json.loads(data)\n\n# Append to cache file\ncache.AddContent(\"log.txt\", \"New log entry\")\n\n# Remove cache file\ncache.RemoveCacheFile(\"old_data.json\")\n</code></pre>"},{"location":"api/cache/#methods","title":"Methods","text":""},{"location":"api/cache/#writecachefilefilename-content","title":"<code>WriteCacheFile(filename, content)</code>","text":"<p>Writes content to a cache file with UTF-8 encoding.</p>"},{"location":"api/cache/#readcachefilefilename","title":"<code>ReadCacheFile(filename)</code>","text":"<p>Reads content from a cache file with UTF-8 encoding.</p>"},{"location":"api/cache/#addcontentfilename-content","title":"<code>AddContent(filename, content)</code>","text":"<p>Appends content to an existing cache file with newline.</p>"},{"location":"api/cache/#removecachefilefilename","title":"<code>RemoveCacheFile(filename)</code>","text":"<p>Removes a cache file from the cache directory.</p>"},{"location":"api/cache/#cacheexistsfilenamenone","title":"<code>CacheExists(filename=None)</code>","text":"<p>Checks if cache file or directory exists.</p>"},{"location":"api/cache/#best-practices","title":"Best Practices","text":"<ul> <li>Use JSON format for structured data</li> <li>Check existence before reading files</li> <li>Clean up unused cache files regularly</li> <li>Handle file I/O exceptions properly</li> </ul>"},{"location":"api/engine/","title":"Engine API","text":"<p>Die Engine API ist deine Basis-Klasse f\u00fcr ToolOS-Anwendungen. Einfach erben und loslegen!</p>"},{"location":"api/engine/#der-vererbungsansatz","title":"Der Vererbungsansatz","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        # Alle APIs sind jetzt verf\u00fcgbar als self.Language, self.Cache, etc.\n\n    def Run(self):\n        # Deine App-Logik hier\n        pass\n</code></pre>"},{"location":"api/engine/#verfugbare-properties","title":"Verf\u00fcgbare Properties","text":"<p>Nach der Vererbung hast du Zugriff auf alle ToolOS APIs:</p> Property Type Beschreibung <code>self.Settings</code> SettingsAPI Konfigurationsverwaltung <code>self.Language</code> LanguageAPI Multi-Language Support <code>self.Cache</code> CacheAPI Datei-Caching System <code>self.StateMachine</code> StateMachineAPI State Management <code>self.Temp</code> TempAPI Tempor\u00e4re Dateien <code>self.Log</code> LogAPI Logging System <code>self.Package</code> PackageAPI Mod/Package Management <code>self.Helper</code> HelperAPI Utility Functions"},{"location":"api/engine/#beispiel-komplette-app","title":"Beispiel: Komplette App","text":"<pre><code>import toolos as engine\n\nclass TaskManager(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.isRunning = False\n        self.tasks = []\n\n    def Run(self):\n        self.LoadTasks()\n        print(self.Language.Translate(\"welcome\"))\n        self.isRunning = True\n\n        while self.isRunning:\n            if self.StateMachine.IsState(self.StateMachine.MAINMENU):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(self.StateMachine.EXIT):\n                break\n\n    def LoadTasks(self):\n        if self.Cache.CacheExists(\"tasks.json\"):\n            import json\n            data = self.Cache.ReadCacheFile(\"tasks.json\")\n            self.tasks = json.loads(data)\n            self.Log.WriteLog(\"app.log\", f\"Loaded {len(self.tasks)} tasks\")\n\n    def ShowMainMenu(self):\n        print(\"\\n=== \" + self.Language.Translate(\"task_manager\") + \" ===\")\n        print(\"1. \" + self.Language.Translate(\"add_task\"))\n        print(\"2. \" + self.Language.Translate(\"list_tasks\"))\n        print(\"3. \" + self.Language.Translate(\"exit\"))\n\n        choice = input(self.Language.Translate(\"input\"))\n\n        if choice == \"1\":\n            self.AddTask()\n        elif choice == \"2\":\n            self.ListTasks()\n        elif choice == \"3\":\n            self.StateMachine.SetState(self.StateMachine.EXIT)\n\n    def AddTask(self):\n        title = input(self.Language.Translate(\"enter_task_title\"))\n        task = {\"id\": len(self.tasks) + 1, \"title\": title, \"done\": False}\n        self.tasks.append(task)\n        self.SaveTasks()\n        print(self.Language.Translate(\"task_added\"))\n\n    def SaveTasks(self):\n        import json\n        data = json.dumps(self.tasks, indent=2)\n        self.Cache.WriteCacheFile(\"tasks.json\", data)\n        self.Log.WriteLog(\"app.log\", \"Tasks saved\")\n\nif __name__ == \"__main__\":\n    app = TaskManager()\n    app.Run()\n</code></pre>"},{"location":"api/engine/#best-practices","title":"Best Practices","text":"<ol> <li>Immer super().init() aufrufen: Initialisiert alle APIs</li> <li>CamelCase f\u00fcr Methoden: <code>ShowMainMenu()</code>, <code>LoadTasks()</code></li> <li>Properties nutzen: <code>self.Language.Translate()</code> statt direkte API-Calls</li> <li>State Machine verwenden: Saubere App-Flow-Kontrolle</li> <li>Logging einbauen: F\u00fcr Debugging und Monitoring</li> </ol>"},{"location":"api/engine/#warum-vererbung","title":"Warum Vererbung?","text":"<ul> <li>\u2705 Sauberer Code: Alle APIs direkt verf\u00fcgbar</li> <li>\u2705 Einfache Struktur: Eine Klasse, alles drin</li> <li>\u2705 Menschlich lesbar: Kein kompliziertes API-Handling</li> <li>\u2705 Erweiterbar: Einfach neue Methoden hinzuf\u00fcgen</li> <li>\u2705 Testbar: Klare Klassenstruktur</li> </ul>"},{"location":"api/helpers/","title":"Comming Soon","text":""},{"location":"api/language/","title":"Language API","text":"<p>The Language API provides zero-configuration internationalization with 7 built-in languages and 260+ pre-translated terms.</p>"},{"location":"api/language/#class-reference","title":"Class Reference","text":""},{"location":"api/language/#toolos.api.LanguageAPI","title":"<code>toolos.api.LanguageAPI</code>","text":""},{"location":"api/language/#toolos.api.LanguageAPI.GetAllTranslationKeys","title":"<code>GetAllTranslationKeys()</code>","text":"<p>Returning all translation keys</p>"},{"location":"api/language/#toolos.api.LanguageAPI.GetAvailableLanguages","title":"<code>GetAvailableLanguages()</code>","text":"<p>Returning all available languages from {self.LANGUAGEPATH}</p>"},{"location":"api/language/#toolos.api.LanguageAPI.Reload","title":"<code>Reload()</code>","text":"<p>Reloading Language-Data and applied Language-Packages</p>"},{"location":"api/language/#toolos.api.LanguageAPI.Translate","title":"<code>Translate(key)</code>","text":"<p>Translating Keyword by key with current language-data</p>"},{"location":"api/language/#toolos.api.LanguageAPI.load_language_data","title":"<code>load_language_data(language)</code>","text":"<p>Loading Language-Data by parameter: language</p>"},{"location":"api/language/#supported-languages","title":"Supported Languages","text":"<p>ToolOS SDK includes professional translations for:</p> Code Language Terms Status <code>de</code> German 260+ \u2705 Complete <code>en</code> English 260+ \u2705 Complete <code>es</code> Spanish 260+ \u2705 Complete <code>fr</code> French 260+ \u2705 Complete <code>ru</code> Russian 260+ \u2705 Complete <code>sv</code> Swedish 260+ \u2705 Complete <code>tr</code> Turkish 260+ \u2705 Complete"},{"location":"api/language/#basic-usage","title":"Basic Usage","text":""},{"location":"api/language/#initialization","title":"Initialization","text":"<pre><code>from toolos.api import LanguageAPI, SettingsAPI\n\n# Initialize with settings (automatically detects language)\nsettings = SettingsAPI(\"settings.json\")\nlanguage = LanguageAPI(settings)\n</code></pre>"},{"location":"api/language/#translation","title":"Translation","text":"<pre><code># Translate text using current language\nwelcome = language.Translate(\"welcome\")  # \"Welcome to ToolOS!\" (en)\nsettings = language.Translate(\"settings\")  # \"Settings\" (en)\nexit_app = language.Translate(\"exit\")  # \"Exit\" (en)\n\n# If translation not found, returns the key itself\nunknown = language.Translate(\"unknown_key\")  # \"unknown_key\"\n</code></pre>"},{"location":"api/language/#common-translations","title":"Common Translations","text":"<p>Here are some frequently used translations across all languages:</p>"},{"location":"api/language/#ui-elements","title":"UI Elements","text":"<pre><code>language.Translate(\"welcome\")      # Welcome message\nlanguage.Translate(\"settings\")     # Settings menu\nlanguage.Translate(\"exit\")         # Exit/Quit\nlanguage.Translate(\"back\")         # Back button\nlanguage.Translate(\"next\")         # Next button\nlanguage.Translate(\"save\")         # Save action\nlanguage.Translate(\"cancel\")       # Cancel action\n</code></pre>"},{"location":"api/language/#system-messages","title":"System Messages","text":"<pre><code>language.Translate(\"app_is_running\")    # App running status\nlanguage.Translate(\"invalid_option\")   # Invalid input message\nlanguage.Translate(\"settings_saved\")   # Settings saved confirmation\nlanguage.Translate(\"exiting_app\")      # App exit message\n</code></pre>"},{"location":"api/language/#error-messages","title":"Error Messages","text":"<pre><code>language.Translate(\"error\")            # Generic error\nlanguage.Translate(\"warning\")          # Warning message\nlanguage.Translate(\"file_not_found\")   # File not found error\nlanguage.Translate(\"permission_denied\") # Access denied error\n</code></pre>"},{"location":"api/language/#language-management","title":"Language Management","text":""},{"location":"api/language/#available-languages","title":"Available Languages","text":"<pre><code># Get list of available language codes\nlanguages = language.GetAvailableLanguages()\nprint(languages)  # ['de', 'en', 'es', 'fr', 'ru', 'sv', 'tr']\n</code></pre>"},{"location":"api/language/#dynamic-language-switching","title":"Dynamic Language Switching","text":"<pre><code># Change language in settings\nsettings.LANGUAGE = \"de\"\nsettings.SetUpdate()\n\n# Reload language data\nlanguage.Reload()\n\n# Now translations are in German\nwelcome = language.Translate(\"welcome\")  # \"Willkommen im ToolOS!\"\n</code></pre>"},{"location":"api/language/#get-all-translation-keys","title":"Get All Translation Keys","text":"<pre><code># Get all available translation keys\nkeys = language.GetAllTranslationKeys()\nprint(f\"Available translations: {len(keys)}\")\n</code></pre>"},{"location":"api/language/#custom-language-packages","title":"Custom Language Packages","text":"<p>Extend translations with custom language packages:</p>"},{"location":"api/language/#adding-custom-translations","title":"Adding Custom Translations","text":"<pre><code># Create custom translation file: my_translations.json\n{\n  \"custom_greeting\": \"Hello from my app!\",\n  \"custom_error\": \"Something went wrong in my feature\"\n}\n\n# Add to language system\nlanguage.AddLanguagePackage(\"en\", \"my_translations.json\")\n\n# Use custom translations\ngreeting = language.Translate(\"custom_greeting\")\n</code></pre>"},{"location":"api/language/#language-package-format","title":"Language Package Format","text":"<p>Custom language files should follow this JSON structure:</p> <pre><code>{\n  \"key1\": \"Translation 1\",\n  \"key2\": \"Translation 2\", \n  \"nested_key\": \"Nested translation\",\n  \"app_specific_term\": \"Your app's specific translation\"\n}\n</code></pre>"},{"location":"api/language/#advanced-features","title":"Advanced Features","text":""},{"location":"api/language/#fallback-mechanism","title":"Fallback Mechanism","text":"<p>If a translation is not found: 1. Returns the original key as fallback 2. Allows graceful degradation  3. Makes missing translations obvious for debugging</p> <pre><code># Missing translation returns key itself\nmissing = language.Translate(\"nonexistent_key\")\nprint(missing)  # \"nonexistent_key\"\n</code></pre>"},{"location":"api/language/#reload-after-settings-change","title":"Reload After Settings Change","text":"<pre><code># Complete reload workflow\nif settings.CheckIfUpdate():\n    settings.Update()\n    language.Reload()  # Critical: reload language after settings change\n\n    # Now using new language\n    message = language.Translate(\"settings_changed\")\n</code></pre>"},{"location":"api/language/#methods-reference","title":"Methods Reference","text":""},{"location":"api/language/#translatekey","title":"<code>Translate(key)</code>","text":"<p>Translates a key to the current language.</p> <p>Parameters: - <code>key</code> (str): Translation key to look up</p> <p>Returns: <code>str</code> - Translated text or the key itself if not found</p>"},{"location":"api/language/#reload","title":"<code>Reload()</code>","text":"<p>Reloads language data after settings change. Call this whenever the language setting changes.</p>"},{"location":"api/language/#getalltranslationkeys","title":"<code>GetAllTranslationKeys()</code>","text":"<p>Returns all available translation keys in the current language.</p> <p>Returns: <code>list[str]</code> - List of all translation keys</p>"},{"location":"api/language/#getavailablelanguages","title":"<code>GetAvailableLanguages()</code>","text":"<p>Returns list of available language codes.</p> <p>Returns: <code>list[str]</code> - List of language codes (e.g., ['de', 'en', 'fr'])</p>"},{"location":"api/language/#addlanguagepackagelanguage-datapath","title":"<code>AddLanguagePackage(language, datapath)</code>","text":"<p>Adds custom translation package for a specific language.</p> <p>Parameters: - <code>language</code> (str): Language code (e.g., 'en', 'de')  - <code>datapath</code> (str): Path to JSON file containing translations</p>"},{"location":"api/language/#language-files-location","title":"Language Files Location","text":"<p>Language files are stored in the path specified by <code>settings.LANGUAGEPATH</code>:</p> <pre><code>data/assets/manager/lang/\n\u251c\u2500\u2500 de.json    # German translations\n\u251c\u2500\u2500 en.json    # English translations  \n\u251c\u2500\u2500 es.json    # Spanish translations\n\u251c\u2500\u2500 fr.json    # French translations\n\u251c\u2500\u2500 ru.json    # Russian translations\n\u251c\u2500\u2500 sv.json    # Swedish translations\n\u2514\u2500\u2500 tr.json    # Turkish translations\n</code></pre>"},{"location":"api/language/#best-practices","title":"Best Practices","text":"<ol> <li>Always call Reload(): After changing language settings, always call <code>language.Reload()</code></li> <li>Use descriptive keys: Choose clear, consistent translation keys</li> <li>Fallback handling: Design UI to handle missing translations gracefully</li> <li>Test all languages: Verify your app works with all supported languages</li> <li>Custom packages: Use custom language packages for app-specific terms</li> </ol>"},{"location":"api/language/#example-multi-language-menu","title":"Example: Multi-Language Menu","text":"<pre><code>class MultiLanguageMenu:\n    def __init__(self, settings, language):\n        self.settings = settings\n        self.language = language\n\n    def show_menu(self):\n        \"\"\"Display menu in current language\"\"\"\n        print(\"=\" * 30)\n        print(self.language.Translate(\"header\"))\n        print(\"=\" * 30)\n        print()\n\n        options = [\n            (\"settings\", \"settings\"),\n            (\"help\", \"help\"), \n            (\"about\", \"about\"),\n            (\"exit\", \"exit\")\n        ]\n\n        for i, (key, _) in enumerate(options):\n            text = self.language.Translate(key)\n            print(f\"{i + 1}. {text}\")\n\n    def change_language(self, new_lang):\n        \"\"\"Change language and reload menu\"\"\"\n        self.settings.LANGUAGE = new_lang\n        self.settings.SetUpdate()\n        self.language.Reload()\n        print(self.language.Translate(\"language_changed\"))\n\n# Usage\nmenu = MultiLanguageMenu(settings, language)\nmenu.show_menu()  # Shows menu in current language\nmenu.change_language(\"de\")  # Switch to German\nmenu.show_menu()  # Shows menu in German\n</code></pre>"},{"location":"api/log/","title":"Log API","text":"<p>The Log API provides structured logging with automatic timestamps and log file management.</p>"},{"location":"api/log/#class-reference","title":"Class Reference","text":""},{"location":"api/log/#toolos.api.LogAPI","title":"<code>toolos.api.LogAPI</code>","text":""},{"location":"api/log/#basic-usage","title":"Basic Usage","text":"<pre><code>from toolos.api import LogAPI\n\n# Initialize with log directory\nlog = LogAPI(\"data/logs\")\n\n# Write log entries\nlog.WriteLog(\"app.log\", \"Application started\")\nlog.WriteLog(\"error.log\", f\"Error occurred: {error_message}\")\nlog.WriteLog(\"debug.log\", f\"Processing item {item_id}\")\n\n# Read log file\nif log.LogExists(\"app.log\"):\n    log_content = log.ReadLog(\"app.log\")\n    print(log_content)\n\n# Clear log file\nlog.ClearLog(\"old_errors.log\")\n\n# Delete log file\nlog.DeleteLog(\"temporary.log\")\n</code></pre>"},{"location":"api/log/#log-format","title":"Log Format","text":"<p>All log entries are automatically timestamped in ISO format:</p> <pre><code>[2024-09-26T10:30:45.123456] Application started\n[2024-09-26T10:30:46.234567] User logged in: john_doe\n[2024-09-26T10:30:47.345678] Processing request #12345\n</code></pre>"},{"location":"api/log/#methods","title":"Methods","text":""},{"location":"api/log/#writelogfilename-message","title":"<code>WriteLog(filename, message)</code>","text":"<p>Appends a timestamped message to the specified log file.</p>"},{"location":"api/log/#readlogfilename","title":"<code>ReadLog(filename)</code>","text":"<p>Reads the entire content of a log file.</p>"},{"location":"api/log/#deletelogfilename","title":"<code>DeleteLog(filename)</code>","text":"<p>Deletes a log file completely.</p>"},{"location":"api/log/#clearlogfilename","title":"<code>ClearLog(filename)</code>","text":"<p>Clears the content of a log file (makes it empty).</p>"},{"location":"api/log/#logexistsfilenamenone","title":"<code>LogExists(filename=None)</code>","text":"<p>Checks if log file or directory exists.</p>"},{"location":"api/overview/","title":"API Overview","text":"<p>ToolOS SDK provides a comprehensive set of APIs for building desktop applications with internationalization support.</p>"},{"location":"api/overview/#core-apis","title":"Core APIs","text":""},{"location":"api/overview/#settings-api","title":"Settings API","text":"<p>Manages application configuration with live reloading capabilities.</p> <ul> <li>\u2705 Load/save JSON configuration files</li> <li>\u2705 Dynamic settings updates</li> <li>\u2705 Configuration validation</li> <li>\u2705 Version management</li> </ul>"},{"location":"api/overview/#language-api","title":"Language API","text":"<p>Provides zero-configuration multi-language support.</p> <ul> <li>\u2705 7 built-in languages (de, en, es, fr, ru, sv, tr)</li> <li>\u2705 260+ pre-translated terms per language</li> <li>\u2705 Custom language packages</li> <li>\u2705 Dynamic language switching</li> </ul>"},{"location":"api/overview/#cache-api","title":"Cache API","text":"<p>File-based caching system for temporary data storage.</p> <ul> <li>\u2705 Write/read cache files</li> <li>\u2705 Append content to existing files</li> <li>\u2705 Cache existence checks</li> <li>\u2705 Automatic cache directory creation</li> </ul>"},{"location":"api/overview/#state-machine","title":"State Machine","text":"<p>Application flow control with predefined states.</p> <ul> <li>\u2705 Predefined application states</li> <li>\u2705 State transitions</li> <li>\u2705 State validation</li> <li>\u2705 Flow control logic</li> </ul>"},{"location":"api/overview/#temp-api","title":"Temp API","text":"<p>Temporary file management system.</p> <ul> <li>\u2705 Temporary file creation/deletion</li> <li>\u2705 Automatic cleanup</li> <li>\u2705 Content appending</li> <li>\u2705 Existence validation</li> </ul>"},{"location":"api/overview/#log-api","title":"Log API","text":"<p>Structured logging with timestamps.</p> <ul> <li>\u2705 Timestamped log entries  </li> <li>\u2705 Multiple log files</li> <li>\u2705 Log file management</li> <li>\u2705 Automatic log directory creation</li> </ul>"},{"location":"api/overview/#package-api","title":"Package API","text":"<p>Package and mod management system.</p> <ul> <li>\u2705 Simple authentication</li> <li>\u2705 Package file operations</li> <li>\u2705 Content management</li> <li>\u2705 User session handling</li> </ul>"},{"location":"api/overview/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api/overview/#initialization","title":"Initialization","text":"<pre><code>from toolos.api import Api\n\n# Initialize with settings file\napp = Api(\"path/to/settings.json\")\n</code></pre>"},{"location":"api/overview/#common-operations","title":"Common Operations","text":"<pre><code># Language translation\ntext = app.Language.Translate(\"welcome\")\n\n# State management\napp.StateMachine.SetState(app.StateMachine.MAINMENU)\nis_main_menu = app.StateMachine.IsState(app.StateMachine.MAINMENU)\n\n# Caching\napp.Cache.WriteCacheFile(\"data.json\", json_data)\ncached_data = app.Cache.ReadCacheFile(\"data.json\")\n\n# Logging\napp.Log.WriteLog(\"app.log\", \"Event occurred\")\n\n# Settings\nif app.Settings.CheckIfUpdate():\n    app.Settings.Update()\n</code></pre>"},{"location":"api/overview/#error-handling","title":"Error Handling","text":"<p>All APIs include proper error handling:</p> <pre><code>try:\n    data = app.Cache.ReadCacheFile(\"nonexistent.txt\")\nexcept FileNotFoundError:\n    print(\"Cache file not found\")\n\ntry:\n    app.Settings.Update()\nexcept json.JSONDecodeError:\n    print(\"Invalid settings file format\")\n</code></pre>"},{"location":"api/overview/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Settings: Updates are event-driven, no polling overhead</li> <li>Language: Translations are cached in memory after loading</li> <li>Cache: File-based operations, suitable for moderate data volumes</li> <li>Logs: Append-only operations for optimal performance</li> </ul>"},{"location":"api/overview/#thread-safety","title":"Thread Safety","text":"<p>ToolOS SDK APIs are not thread-safe by design. For multi-threaded applications, implement proper synchronization around API calls.</p>"},{"location":"api/overview/#api-compatibility","title":"API Compatibility","text":"<p>ToolOS SDK follows semantic versioning. The current version is <code>1.3.2</code>:</p> <ul> <li>Major version changes may break API compatibility</li> <li>Minor version changes add features while maintaining compatibility  </li> <li>Patch versions contain only bug fixes</li> </ul>"},{"location":"api/package/","title":"Package API","text":"<p>The Package API provides package and mod management with simple authentication and file operations.</p>"},{"location":"api/package/#class-reference","title":"Class Reference","text":""},{"location":"api/package/#toolos.api.PackageAPI","title":"<code>toolos.api.PackageAPI</code>","text":""},{"location":"api/package/#basic-usage","title":"Basic Usage","text":"<pre><code>from toolos.api import PackageAPI\n\n# Initialize with package directory\npackage = PackageAPI(\"data/packages\")\n\n# Login (simple authentication)\nif package.Login(\"admin\", \"password\"):\n    print(f\"Logged in as: {package.USERNAME}\")\n\n    # Write package file\n    package.WritePackageFile(\"mod_list.json\", json.dumps(mod_data))\n\n    # Read package file\n    content = package.ReadPackageFile(\"mod_list.json\")\n\n    # Logout when done\n    package.Logout()\n</code></pre>"},{"location":"api/package/#authentication","title":"Authentication","text":"<p>The Package API includes basic authentication:</p> <ul> <li>Default credentials: <code>admin</code> / <code>password</code></li> <li>Session management with <code>isLoggedIn</code> status</li> <li>Username tracking for logged-in users</li> </ul>"},{"location":"api/package/#methods","title":"Methods","text":""},{"location":"api/package/#loginusername-password","title":"<code>Login(username, password)</code>","text":"<p>Authenticates user with username and password.</p>"},{"location":"api/package/#logout","title":"<code>Logout()</code>","text":"<p>Logs out current user and clears session.</p>"},{"location":"api/package/#writepackagefilefilename-content","title":"<code>WritePackageFile(filename, content)</code>","text":"<p>Writes content to a package file (requires login).</p>"},{"location":"api/package/#readpackagefilefilename","title":"<code>ReadPackageFile(filename)</code>","text":"<p>Reads content from a package file.</p>"},{"location":"api/package/#addcontentfilename-content","title":"<code>AddContent(filename, content)</code>","text":"<p>Appends content to a package file.</p>"},{"location":"api/package/#removepackagefilefilename","title":"<code>RemovePackageFile(filename)</code>","text":"<p>Removes a package file from the package directory.</p>"},{"location":"api/sdk/","title":"Modding SDK","text":"<p>Erstelle deine eigenen Mods und Erweiterungen f\u00fcr ToolOS-basierte Anwendungen!</p>"},{"location":"api/sdk/#was-sind-mods","title":"\ud83c\udfae Was sind Mods?","text":"<p>Mods sind eigenst\u00e4ndige Module, die in ToolOS-Apps geladen werden k\u00f6nnen. Sie erweitern die Funktionalit\u00e4t ohne den Kern-Code zu \u00e4ndern.</p>"},{"location":"api/sdk/#beispiel-shopping-mod-aus-deiner-codebase","title":"Beispiel: Shopping Mod aus deiner Codebase","text":"<pre><code>import toolos as engine\n\nclass ModdedApp(engine.ToolsApi):\n\n    def __init__(self):\n        super().__init__(\"settings.json\", **sdk) # Requires sdk dict (see below)\n        self.SDK = sdk\n        self.AppName = sdk.get(\"name\")\n        self.Version = sdk.get(\"version\")\n\n        # Initialisiere Logging\n        self.Log.CreateLogFile(\"modded_app.log\")\n        self.Log.WriteLog(\"modded_app.log\", f\"{self.AppName} v{self.Version} started\")\n\n    def ShowMainMenu(self):\n        print(self.Language.Translate(\"header\"))\n        print(f\"1. {self.Language.Translate('new_shopping')}\")\n        print(f\"2. {self.Language.Translate('exit')}\")\n\n        choice = input(self.Language.Translate(\"input\"))\n        if choice == \"0\":\n            self.StartShopping()\n        elif choice == \"1\":\n            self.StateMachine.SetState(\"exit\")\n\n    def StartShopping(self):\n        # Einkaufslogik mit State Management\n        self.StateMachine.SetState(\"shopping_mode\")\n        # Speichere Einkaufssession im Cache\n        session_data = {\"items\": [], \"total\": 0.0}\n        self.Cache.WriteCacheFile(\"current_session.json\", \n                                json.dumps(session_data))\n</code></pre>"},{"location":"api/sdk/#mod-struktur","title":"\ud83d\udcc1 Mod-Struktur","text":"<pre><code>MyMod/\n\u251c\u2500\u2500 package.json          # Mod-Informationen\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 lang/            # \u00dcbersetzungen\n\u2502       \u251c\u2500\u2500 de.json\n\u2502       \u251c\u2500\u2500 en.json\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 app.py           # Haupt-Mod-Datei\n    \u2514\u2500\u2500 engine/\n        \u2514\u2500\u2500 engine.py    # Mod-Engine (optional)\n</code></pre>"},{"location":"api/sdk/#packagejson","title":"\ud83d\udccb package.json","text":"<pre><code>{\n    \"name\": \"Shopping Simulator\",\n    \"version\": \"2.0.4\",\n    \"author\": \"Your Name\",\n    \"description\": \"A realistic shopping experience simulator\",\n    \"main\": \"src/app.py\",\n    \"languages\": [\"de\", \"en\", \"fr\", \"es\"],\n    \"dependencies\": [],\n    \"type\": \"mod\"\n}\n</code></pre>"},{"location":"api/sdk/#multi-language-support","title":"\ud83c\udf0d Multi-Language Support","text":""},{"location":"api/sdk/#ubersetzungsdateien","title":"\u00dcbersetzungsdateien","text":"<p>data/lang/de.json: <pre><code>{\n    \"header\": \"=== Shopping Simulator ===\",\n    \"new_shopping\": \"Neuer Einkauf\",\n    \"shopping_cart\": \"Warenkorb\",\n    \"total_price\": \"Gesamtpreis\",\n    \"checkout\": \"Zur Kasse\",\n    \"exit\": \"Beenden\",\n    \"input\": \"Eingabe: &gt; \"\n}\n</code></pre></p> <p>data/lang/en.json: <pre><code>{\n    \"header\": \"=== Shopping Simulator ===\",\n    \"new_shopping\": \"New Shopping\",\n    \"shopping_cart\": \"Shopping Cart\", \n    \"total_price\": \"Total Price\",\n    \"checkout\": \"Checkout\",\n    \"exit\": \"Exit\",\n    \"input\": \"Input: &gt; \"\n}\n</code></pre></p>"},{"location":"api/sdk/#sprachen-in-mods-laden","title":"Sprachen in Mods laden","text":"<pre><code>class ShoppingApp():\n    def __init__(self, api):\n        self.api = api\n        self.language = api.Language\n\n        # Lade Mod-spezifische \u00dcbersetzungen\n        self.LoadModLanguages()\n\n    def LoadModLanguages(self):\n        import os\n        lang_path = os.path.join(os.path.dirname(__file__), \"../data/lang\")\n        current_lang = self.api.Settings.LANGUAGE\n\n        lang_file = os.path.join(lang_path, f\"{current_lang}.json\")\n        if os.path.exists(lang_file):\n            self.language.AddLanguagePackage(current_lang, lang_file)\n            self.language.Reload()\n</code></pre>"},{"location":"api/sdk/#mod-engine-erstellen","title":"\ud83d\udd27 Mod-Engine erstellen","text":"<p>F\u00fcr komplexere Mods kannst du eine eigene Engine erstellen:</p> <pre><code># src/engine/engine.py\nimport toolos as base_engine\n\nclass ModEngine(base_engine.Api):\n    def __init__(self, settings_path):\n        super().__init__(settings_path)\n        self.ModName = \"Shopping Simulator\"\n        self.ModVersion = \"2.0.4\"\n\n    def InitializeMod(self):\n        \"\"\"Mod-spezifische Initialisierung\"\"\"\n        self.Log.WriteLog(\"mod.log\", f\"{self.ModName} v{self.ModVersion} loaded\")\n\n        # Lade Mod-Konfiguration\n        if self.Cache.CacheExists(\"mod_config.json\"):\n            import json\n            config_data = self.Cache.ReadCacheFile(\"mod_config.json\")\n            self.ModConfig = json.loads(config_data)\n        else:\n            self.CreateDefaultConfig()\n\n    def CreateDefaultConfig(self):\n        \"\"\"Erstelle Standard-Mod-Konfiguration\"\"\"\n        import json\n        default_config = {\n            \"difficulty\": \"normal\",\n            \"currency\": \"EUR\",\n            \"shop_items\": 50,\n            \"enable_discounts\": True\n        }\n\n        config_data = json.dumps(default_config, indent=2)\n        self.Cache.WriteCacheFile(\"mod_config.json\", config_data)\n        self.ModConfig = default_config\n</code></pre>"},{"location":"api/sdk/#state-management-in-mods","title":"\ud83c\udfaf State Management in Mods","text":"<pre><code>class ShoppingStates:\n    SHOPPING_MENU = \"shopping_menu\"\n    BROWSING_ITEMS = \"browsing_items\"\n    IN_CART = \"in_cart\"\n    CHECKOUT = \"checkout\"\n    PAYMENT = \"payment\"\n\nclass ShoppingMod(ModEngine):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.States = ShoppingStates()\n        self.ShoppingCart = []\n        self.TotalPrice = 0.0\n\n    def Run(self):\n        self.StateMachine.SetState(self.States.SHOPPING_MENU)\n\n        while True:\n            if self.StateMachine.IsState(self.States.SHOPPING_MENU):\n                self.ShowShoppingMenu()\n            elif self.StateMachine.IsState(self.States.BROWSING_ITEMS):\n                self.BrowseItems()\n            elif self.StateMachine.IsState(self.States.CHECKOUT):\n                self.ProcessCheckout()\n            elif self.StateMachine.IsState(self.StateMachine.EXIT):\n                break\n</code></pre>"},{"location":"api/sdk/#mod-daten-verwalten","title":"\ud83d\udcbe Mod-Daten verwalten","text":"<pre><code>class ShoppingData:\n    def __init__(self, mod_engine):\n        self.engine = mod_engine\n\n    def SaveShoppingSession(self, cart_items, total):\n        \"\"\"Speichere Einkaufssession\"\"\"\n        import json\n        session_data = {\n            \"timestamp\": self.GetCurrentTimestamp(),\n            \"items\": cart_items,\n            \"total\": total,\n            \"currency\": self.engine.ModConfig.get(\"currency\", \"EUR\")\n        }\n\n        filename = f\"shopping_session_{session_data['timestamp']}.json\"\n        self.engine.Cache.WriteCacheFile(filename, json.dumps(session_data, indent=2))\n        self.engine.Log.WriteLog(\"shopping.log\", f\"Session saved: {total} {session_data['currency']}\")\n\n    def LoadShoppingSessions(self):\n        \"\"\"Lade alle Einkaufssessions\"\"\"\n        sessions = []\n        # Implementierung zum Laden aller Session-Files\n        return sessions\n\n    def GetCurrentTimestamp(self):\n        import datetime\n        return datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n</code></pre>"},{"location":"api/sdk/#mod-loading-system","title":"\ud83d\ude80 Mod-Loading System","text":"<p>So l\u00e4dt die Haupt-App deine Mods:</p> <pre><code># Im Haupt-App Loader\nclass ModLoader:\n    def __init__(self, settings):\n        self.settings = settings\n        self.LoadedMods = []\n\n    def LoadMods(self):\n        import os\n        import json\n\n        mod_path = self.settings.Global(\"modpath\")\n        if not os.path.exists(mod_path):\n            return\n\n        for mod_folder in os.listdir(mod_path):\n            package_file = os.path.join(mod_path, mod_folder, \"package.json\")\n            if os.path.exists(package_file):\n                with open(package_file, 'r', encoding='utf-8') as f:\n                    mod_info = json.load(f)\n\n                self.LoadMod(mod_folder, mod_info)\n\n    def LoadMod(self, folder_name, mod_info):\n        \"\"\"Lade einzelnen Mod\"\"\"\n        mod_entry = {\n            \"build\": {\n                \"mesh\": f\"{mod_info['name']} v{mod_info['version']}\",\n                \"source\": mod_info[\"main\"],\n                \"action\": \"start\",\n                \"path\": folder_name,\n                \"method\": \"main\"\n            }\n        }\n        self.LoadedMods.append(mod_entry)\n</code></pre>"},{"location":"api/sdk/#mod-beispiele","title":"\ud83d\udcda Mod-Beispiele","text":""},{"location":"api/sdk/#1-terminal-mod","title":"1. Terminal Mod","text":"<pre><code># Einfacher Terminal-Emulator\nclass TerminalMod(ModEngine):\n    def RunCommand(self, command):\n        import subprocess\n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        return result.stdout\n</code></pre>"},{"location":"api/sdk/#2-task-manager-mod","title":"2. Task Manager Mod","text":"<pre><code># Aufgabenverwaltung\nclass TaskManagerMod(ModEngine):\n    def AddTask(self, title, priority=\"normal\"):\n        task = {\n            \"id\": self.GenerateTaskId(),\n            \"title\": title,\n            \"priority\": priority,\n            \"created\": self.GetCurrentTimestamp(),\n            \"completed\": False\n        }\n        self.SaveTask(task)\n</code></pre>"},{"location":"api/sdk/#best-practices-fur-mods","title":"\ud83d\udee0\ufe0f Best Practices f\u00fcr Mods","text":"<ol> <li>Eigene Language Packages: Nutze das Multi-Language-System</li> <li>State Management: Verwende die StateMachine f\u00fcr sauberen Flow</li> <li>Daten persistieren: Nutze Cache/Temp APIs f\u00fcr Mod-Daten</li> <li>Logging: Protokolliere wichtige Mod-Events</li> <li>Fehlerbehandlung: Robuste Error-Handling-Implementierung</li> <li>Konfigurierbar: Lade Mod-Settings aus JSON-Files</li> <li>Performance: Effiziente Datenstrukturen verwenden</li> </ol>"},{"location":"api/sdk/#mod-veroffentlichen","title":"\ud83c\udf89 Mod ver\u00f6ffentlichen","text":"<ol> <li>Testen: Ausgiebig in verschiedenen Sprachen testen</li> <li>Dokumentation: README mit Installation und Usage</li> <li>Versionierung: Semantische Versionierung verwenden</li> <li>Package.json: Vollst\u00e4ndige Mod-Informationen</li> <li>Beispiele: Code-Beispiele f\u00fcr andere Entwickler</li> </ol>"},{"location":"api/settings/","title":"Settings API","text":"<p>The Settings API manages application configuration with support for dynamic updates and live reloading.</p>"},{"location":"api/settings/#class-reference","title":"Class Reference","text":""},{"location":"api/settings/#toolos.api.SettingsAPI","title":"<code>toolos.api.SettingsAPI</code>","text":""},{"location":"api/settings/#key-features","title":"Key Features","text":"<ul> <li>JSON Configuration: Load settings from JSON files with UTF-8 encoding</li> <li>Live Reloading: Detect and apply configuration changes at runtime</li> <li>Property Access: Easy access to common settings through properties</li> <li>Update Mechanism: Built-in update flag system for change detection</li> </ul>"},{"location":"api/settings/#basic-usage","title":"Basic Usage","text":""},{"location":"api/settings/#initialization","title":"Initialization","text":"<pre><code>from toolos.api import SettingsAPI\n\n# Initialize with settings file path\nsettings = SettingsAPI(\"path/to/settings.json\")\n</code></pre>"},{"location":"api/settings/#accessing-settings","title":"Accessing Settings","text":"<pre><code># Access common properties\nversion = settings.VERSION\nlanguage = settings.LANGUAGE\ncache_path = settings.CACHEPATH\n\n# Access any setting by key\ncustom_value = settings.Global(\"custom_setting\")\n</code></pre>"},{"location":"api/settings/#settings-file-format","title":"Settings File Format","text":"<p>Your <code>settings.json</code> should follow this structure:</p> <pre><code>{\n  \"version\": \"1.0.0\",\n  \"language\": \"en\",\n  \"mods_enabled\": true,\n  \"cachepath\": \"data/cache\",\n  \"temppath\": \"data/temp\",\n  \"logpath\": \"data/logs\",\n  \"languagepath\": \"data/lang\",\n  \"packagepath\": \"data/packages\",\n  \"apipath\": \"data/api\",\n  \"modpath\": \"data/mods\",\n  \"update\": false\n}\n</code></pre>"},{"location":"api/settings/#dynamic-updates","title":"Dynamic Updates","text":""},{"location":"api/settings/#check-for-updates","title":"Check for Updates","text":"<pre><code># Check if settings were modified\nif settings.CheckIfUpdate():\n    print(\"Settings have been updated\")\n</code></pre>"},{"location":"api/settings/#trigger-updates","title":"Trigger Updates","text":"<pre><code># Mark settings for update (sets update flag to True)\nsettings.SetUpdate()\n\n# Reload settings from file\nsettings.Update()\n</code></pre>"},{"location":"api/settings/#update-workflow","title":"Update Workflow","text":"<pre><code># Typical update workflow\nif settings.CheckIfUpdate():\n    # Reload settings from disk\n    settings.Update()\n\n    # Reload dependent systems\n    language.Reload()  # If language changed\n\n    print(\"Settings updated successfully\")\n</code></pre>"},{"location":"api/settings/#available-properties","title":"Available Properties","text":"Property Description Default <code>VERSION</code> Application version <code>None</code> <code>LANGUAGE</code> Current language code <code>None</code> <code>PACKAGEPATH</code> Package directory path <code>None</code> <code>CACHEPATH</code> Cache directory path <code>None</code> <code>TEMPPATH</code> Temporary files path <code>None</code> <code>LOGPATH</code> Log files directory <code>None</code> <code>APIPATH</code> API files directory <code>None</code> <code>LANGUAGEPATH</code> Language files directory <code>None</code> <code>MODPATH</code> Mods directory path <code>None</code> <code>MODS_ENABLED</code> Whether mods are enabled <code>False</code>"},{"location":"api/settings/#methods","title":"Methods","text":""},{"location":"api/settings/#loadsettings","title":"<code>LoadSettings()</code>","text":"<p>Loads settings from the JSON file specified in <code>SETTINGSPATH</code>.</p> <p>Returns: <code>dict</code> - The loaded settings dictionary</p> <p>Raises: <code>FileNotFoundError</code>, <code>json.JSONDecodeError</code></p>"},{"location":"api/settings/#globalkey","title":"<code>Global(key)</code>","text":"<p>Retrieves a setting value by key.</p> <p>Parameters: - <code>key</code> (str): The setting key to retrieve</p> <p>Returns: <code>Any</code> - The setting value or <code>None</code> if not found</p>"},{"location":"api/settings/#setupdate","title":"<code>SetUpdate()</code>","text":"<p>Sets the update flag to <code>True</code> in the settings file, indicating that settings have been modified.</p>"},{"location":"api/settings/#checkifupdate","title":"<code>CheckIfUpdate()</code>","text":"<p>Checks if the update flag is set in the current settings.</p> <p>Returns: <code>bool</code> - <code>True</code> if update flag is set</p>"},{"location":"api/settings/#update","title":"<code>Update()</code>","text":"<p>Reloads all settings from the file and updates all properties.</p>"},{"location":"api/settings/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    settings = SettingsAPI(\"settings.json\")\nexcept FileNotFoundError:\n    print(\"Settings file not found\")\nexcept json.JSONDecodeError:\n    print(\"Invalid JSON format\")\n\ntry:\n    settings.Update()\nexcept Exception as e:\n    print(f\"Failed to update settings: {e}\")\n</code></pre>"},{"location":"api/settings/#best-practices","title":"Best Practices","text":"<ol> <li>Use absolute paths: Provide full paths to avoid path resolution issues</li> <li>Handle missing files: Always wrap initialization in try-catch blocks</li> <li>Regular updates: Check for updates in your main application loop</li> <li>Backup settings: Keep backup copies of configuration files</li> <li>Validate settings: Verify required keys exist after loading</li> </ol>"},{"location":"api/settings/#example-complete-settings-management","title":"Example: Complete Settings Management","text":"<pre><code>import json\nfrom toolos.api import SettingsAPI\n\nclass AppSettings:\n    def __init__(self, settings_path):\n        self.settings = SettingsAPI(settings_path)\n        self.callbacks = []\n\n    def add_update_callback(self, callback):\n        \"\"\"Add callback to be called when settings update\"\"\"\n        self.callbacks.append(callback)\n\n    def check_and_update(self):\n        \"\"\"Check for updates and notify callbacks\"\"\"\n        if self.settings.CheckIfUpdate():\n            self.settings.Update()\n\n            # Notify all callbacks\n            for callback in self.callbacks:\n                callback(self.settings)\n\n            return True\n        return False\n\n    def get_safe(self, key, default=None):\n        \"\"\"Safely get setting with default value\"\"\"\n        return self.settings.Global(key) or default\n\n# Usage\napp_settings = AppSettings(\"config.json\")\napp_settings.add_update_callback(lambda s: print(f\"Language changed to: {s.LANGUAGE}\"))\n\n# In main loop\nif app_settings.check_and_update():\n    print(\"Settings were updated\")\n</code></pre>"},{"location":"api/statemachine/","title":"State Machine API","text":"<p>The State Machine API provides application flow control with predefined states for managing application lifecycle.</p>"},{"location":"api/statemachine/#class-reference","title":"Class Reference","text":""},{"location":"api/statemachine/#toolos.api.StateMachineAPI","title":"<code>toolos.api.StateMachineAPI</code>","text":""},{"location":"api/statemachine/#toolos.api.StateMachineAPI.__init__","title":"<code>__init__()</code>","text":"<p>beginning with first_entry state</p>"},{"location":"api/statemachine/#predefined-states","title":"Predefined States","text":"State Description <code>FIRST_ENTRY</code> Initial application state <code>MAINMENU</code> Main menu state <code>STEP_1</code> to <code>STEP_5</code> Generic workflow steps <code>EXIT</code> Application exit state"},{"location":"api/statemachine/#basic-usage","title":"Basic Usage","text":"<pre><code>from toolos.api import StateMachineAPI\n\n# Initialize state machine\nstate_machine = StateMachineAPI()\n\n# Check current state (starts with FIRST_ENTRY)\nif state_machine.IsState(state_machine.FIRST_ENTRY):\n    print(\"First time running\")\n    state_machine.SetState(state_machine.MAINMENU)\n\n# State-based logic\nif state_machine.IsState(state_machine.MAINMENU):\n    show_main_menu()\nelif state_machine.IsState(state_machine.EXIT):\n    cleanup_and_exit()\n</code></pre>"},{"location":"api/statemachine/#methods","title":"Methods","text":""},{"location":"api/statemachine/#setstatenew_state","title":"<code>SetState(new_state)</code>","text":"<p>Changes the current state to the specified state.</p>"},{"location":"api/statemachine/#getstate","title":"<code>GetState()</code>","text":"<p>Returns the current state string.</p>"},{"location":"api/statemachine/#isstatecheck_state","title":"<code>IsState(check_state)</code>","text":"<p>Checks if the current state matches the specified state.</p>"},{"location":"api/statemachine/#application-flow-example","title":"Application Flow Example","text":"<pre><code>class Application:\n    def __init__(self):\n        self.state_machine = StateMachineAPI()\n        self.running = True\n\n    def run(self):\n        while self.running:\n            if self.state_machine.IsState(self.state_machine.FIRST_ENTRY):\n                self.initialize_app()\n                self.state_machine.SetState(self.state_machine.MAINMENU)\n\n            elif self.state_machine.IsState(self.state_machine.MAINMENU):\n                choice = self.show_menu()\n                self.handle_menu_choice(choice)\n\n            elif self.state_machine.IsState(self.state_machine.EXIT):\n                self.running = False\n</code></pre>"},{"location":"api/temp/","title":"Temp API","text":"<p>The Temp API manages temporary files with automatic cleanup capabilities.</p>"},{"location":"api/temp/#class-reference","title":"Class Reference","text":""},{"location":"api/temp/#toolos.api.TempAPI","title":"<code>toolos.api.TempAPI</code>","text":""},{"location":"api/temp/#basic-usage","title":"Basic Usage","text":"<pre><code>from toolos.api import TempAPI\n\n# Initialize with temp directory\ntemp = TempAPI(\"data/temp\")\n\n# Write temporary file\ntemp.WriteTempFile(\"session.json\", json.dumps(session_data))\n\n# Read temporary file\nif temp.TempExists(\"session.json\"):\n    data = temp.ReadTempFile(\"session.json\")\n\n# Clean up all temp files\ntemp.RemoveTempFile()  # Removes all files\n\n# Remove specific temp file\ntemp.RemoveTempFile(\"old_session.json\")\n</code></pre>"},{"location":"api/temp/#methods","title":"Methods","text":""},{"location":"api/temp/#writetempfilefilename-content","title":"<code>WriteTempFile(filename, content)</code>","text":"<p>Writes content to a temporary file.</p>"},{"location":"api/temp/#readtempfilefilename","title":"<code>ReadTempFile(filename)</code>","text":"<p>Reads content from a temporary file.</p>"},{"location":"api/temp/#addcontentfilename-content","title":"<code>AddContent(filename, content)</code>","text":"<p>Appends content to a temporary file.</p>"},{"location":"api/temp/#removetempfilefilenamenone","title":"<code>RemoveTempFile(filename=None)</code>","text":"<p>Removes temp file(s). If no filename provided, removes all temp files.</p>"},{"location":"api/temp/#tempexistsfilenamenone","title":"<code>TempExists(filename=None)</code>","text":"<p>Checks if temp file or directory exists.</p>"},{"location":"en/","title":"ToolOS SDK Documentation","text":"<p>Welcome to ToolOS SDK - A lightweight Python application framework with inheritance-based architecture, multilingual support, and modular design.</p>"},{"location":"en/#what-is-toolos-sdk","title":"\ud83d\ude80 What is ToolOS SDK?","text":"<p>ToolOS SDK is a professional framework for building Python applications with:</p> <ul> <li>Inheritance Architecture: Simple class inheritance from <code>engine.Api</code></li> <li>Multilingual Support: 7 languages with dynamic switching</li> <li>State Management: Clean state-based application flow</li> <li>Caching System: Efficient data caching and persistence</li> <li>Logging: Comprehensive logging with multiple log files</li> <li>Modular Design: Plugin/mod system for extensibility</li> </ul>"},{"location":"en/#quick-start","title":"\ud83d\udca1 Quick Start","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.AppName = \"My Application\"\n\n    def Run(self):\n        welcome_text = self.Language.Translate(\"welcome\")\n        print(f\"{welcome_text} - {self.AppName}\")\n\n        # Your application logic here\n        self.StateMachine.SetState(\"main_menu\")\n\nif __name__ == \"__main__\":\n    app = MyApp()\n    app.Run()\n</code></pre>"},{"location":"en/#core-features","title":"\ud83d\udee0\ufe0f Core Features","text":""},{"location":"en/#inheritance-based-architecture","title":"\ud83c\udfd7\ufe0f Inheritance-Based Architecture","text":"<p>Instead of composition, ToolOS uses clean inheritance:</p> <pre><code># \u2705 ToolOS Way - Clean inheritance\nimport toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        # All APIs available via self.Settings, self.Language, etc.\n</code></pre>"},{"location":"en/#multi-language-support","title":"\ud83c\udf0d Multi-Language Support","text":"<p>Built-in support for 7 languages with easy switching:</p> <pre><code># Language switching\nself.Language.SetLanguage(\"en\")  # English\nself.Language.SetLanguage(\"de\")  # German\nself.Language.SetLanguage(\"fr\")  # French\n\n# Text translation\nwelcome = self.Language.Translate(\"welcome\")\nmenu_title = self.Language.Translate(\"main_menu\")\n</code></pre>"},{"location":"en/#smart-caching-system","title":"\ud83d\udcbe Smart Caching System","text":"<p>Efficient data persistence with simple API:</p> <pre><code># Save data to cache\nimport json\nuser_data = {\"name\": \"John\", \"score\": 1500}\nself.Cache.WriteCacheFile(\"user.json\", json.dumps(user_data))\n\n# Load data from cache\nif self.Cache.CacheExists(\"user.json\"):\n    data = self.Cache.ReadCacheFile(\"user.json\")\n    user_data = json.loads(data)\n</code></pre>"},{"location":"en/#state-management","title":"\ud83d\udd04 State Management","text":"<p>Clean state-based application flow:</p> <pre><code>class AppStates:\n    MAIN_MENU = \"main_menu\"\n    SETTINGS = \"settings\"\n    EXIT = \"exit\"\n\nclass MyApp(engine.Api):\n    def Run(self):\n        while True:\n            if self.StateMachine.IsState(AppStates.MAIN_MENU):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(AppStates.EXIT):\n                break\n</code></pre>"},{"location":"en/#available-apis","title":"\ud83d\udce6 Available APIs","text":"Component Purpose Key Methods Settings Configuration management <code>Global()</code>, <code>User()</code>, <code>Save()</code> Language Multi-language support <code>Translate()</code>, <code>SetLanguage()</code> Cache Data caching <code>WriteCacheFile()</code>, <code>ReadCacheFile()</code> StateMachine State management <code>SetState()</code>, <code>IsState()</code> Temp Temporary files <code>WriteTempFile()</code>, <code>ReadTempFile()</code> Log Logging system <code>WriteLog()</code>, <code>ReadLog()</code> Package Mod/package loading <code>LoadPackage()</code>, <code>ListPackages()</code>"},{"location":"en/#real-world-example","title":"\ud83c\udfae Real-World Example","text":"<p>Here's how the Shopping mod from your codebase uses ToolOS:</p> <pre><code>import toolos as engine\n\nclass ShoppingApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.AppName = \"Shopping Simulator\"\n        self.Version = \"2.0.4\"\n\n        # Initialize logging\n        self.Log.CreateLogFile(\"shopping.log\")\n        self.Log.WriteLog(\"shopping.log\", f\"{self.AppName} v{self.Version} started\")\n\n    def ShowMainMenu(self):\n        print(self.Language.Translate(\"header\"))\n        print(f\"1. {self.Language.Translate('new_shopping')}\")\n        print(f\"2. {self.Language.Translate('exit')}\")\n\n        choice = input(self.Language.Translate(\"input\"))\n        if choice == \"0\":\n            self.StartShopping()\n        elif choice == \"1\":\n            self.StateMachine.SetState(\"exit\")\n\n    def StartShopping(self):\n        # Shopping logic with state management\n        self.StateMachine.SetState(\"shopping_mode\")\n        # Save shopping session to cache\n        session_data = {\"items\": [], \"total\": 0.0}\n        self.Cache.WriteCacheFile(\"current_session.json\", \n                                json.dumps(session_data))\n</code></pre>"},{"location":"en/#why-choose-toolos","title":"\ud83c\udf1f Why Choose ToolOS?","text":"<ul> <li>Simple: One base class, clean inheritance</li> <li>Powerful: Full-featured APIs for all common tasks</li> <li>Multilingual: Built-in support for international applications</li> <li>Extensible: Mod system for custom functionality</li> <li>Professional: Used in production applications</li> <li>CamelCase: Human-readable method names</li> <li>Well-documented: Comprehensive documentation and examples</li> </ul>"},{"location":"en/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ol> <li>Getting Started - Create your first ToolOS application</li> <li>Engine API - Learn the core inheritance API</li> <li>API Reference - Complete API documentation</li> <li>Modding SDK - Build mods and extensions</li> </ol>"},{"location":"en/#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<p>ToolOS SDK is actively developed and maintained. Join our community:</p> <ul> <li>GitHub: ToolOS SDK Repository</li> <li>Documentation: This site with full examples</li> <li>Issues: Report bugs and request features</li> <li>Examples: Real-world applications in the repository</li> </ul> <p>Ready to build professional Python applications? Let's get started! \ud83d\ude80</p>"},{"location":"en/api-reference/","title":"API Reference","text":"<p>Complete API reference for all ToolOS SDK components.</p>"},{"location":"en/api-reference/#engineapi-base-class","title":"\ud83c\udfd7\ufe0f Engine.Api (Base Class)","text":"Component Type Description Available Methods <code>self.Settings</code> ToolOS.Settings Configuration management <code>Global()</code>, <code>User()</code>, <code>Save()</code>, <code>LoadSettings()</code> <code>self.Language</code> ToolOS.Language Multi-language system <code>Translate()</code>, <code>SetLanguage()</code>, <code>AddLanguagePackage()</code> <code>self.Cache</code> ToolOS.Cache Cache management <code>WriteCacheFile()</code>, <code>ReadCacheFile()</code>, <code>CacheExists()</code> <code>self.StateMachine</code> ToolOS.StateMachine State management <code>SetState()</code>, <code>GetState()</code>, <code>IsState()</code> <code>self.Temp</code> ToolOS.Temp Temporary files <code>WriteTempFile()</code>, <code>ReadTempFile()</code>, <code>TempExists()</code> <code>self.Log</code> ToolOS.Log Logging system <code>WriteLog()</code>, <code>ReadLog()</code>, <code>CreateLogFile()</code> <code>self.Package</code> ToolOS.Package Package management <code>LoadPackage()</code>, <code>GetPackageInfo()</code>, <code>ListPackages()</code>"},{"location":"en/api-reference/#settings-api","title":"\u2699\ufe0f Settings API","text":"Method Parameters Returns Description <code>Global(key)</code> <code>key: str</code> <code>str</code> Get global setting <code>User(key)</code> <code>key: str</code> <code>str</code> Get user setting <code>Save()</code> - <code>bool</code> Save settings <code>LoadSettings()</code> - <code>dict</code> Load all settings <code>SetGlobal(key, value)</code> <code>key: str, value: str</code> <code>bool</code> Set global setting <code>SetUser(key, value)</code> <code>key: str, value: str</code> <code>bool</code> Set user setting"},{"location":"en/api-reference/#settings-examples","title":"Settings Examples","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Get settings\n        language = self.Settings.Global(\"language\")\n        user_theme = self.Settings.User(\"theme\")\n\n        # Set settings\n        self.Settings.SetGlobal(\"app_version\", \"1.0.0\")\n        self.Settings.SetUser(\"last_login\", \"2024-01-01\")\n        self.Settings.Save()\n</code></pre>"},{"location":"en/api-reference/#language-api","title":"\ud83c\udf0d Language API","text":"Method Parameters Returns Description <code>Translate(key)</code> <code>key: str</code> <code>str</code> Translate text <code>SetLanguage(lang)</code> <code>lang: str</code> <code>bool</code> Change language <code>AddLanguagePackage(lang, file_path)</code> <code>lang: str, file_path: str</code> <code>bool</code> Add language package <code>GetAvailableLanguages()</code> - <code>list</code> Available languages <code>GetCurrentLanguage()</code> - <code>str</code> Current language <code>Reload()</code> - <code>bool</code> Reload language packages"},{"location":"en/api-reference/#language-examples","title":"Language Examples","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Translate text\n        welcome_text = self.Language.Translate(\"welcome\")\n        menu_title = self.Language.Translate(\"main_menu\")\n\n        # Change language\n        self.Language.SetLanguage(\"en\")\n\n        # Show available languages\n        languages = self.Language.GetAvailableLanguages()\n        print(f\"Available languages: {languages}\")\n</code></pre>"},{"location":"en/api-reference/#cache-api","title":"\ud83d\udcbe Cache API","text":"Method Parameters Returns Description <code>WriteCacheFile(filename, data)</code> <code>filename: str, data: str</code> <code>bool</code> Write cache file <code>ReadCacheFile(filename)</code> <code>filename: str</code> <code>str</code> Read cache file <code>CacheExists(filename)</code> <code>filename: str</code> <code>bool</code> Cache file exists <code>DeleteCacheFile(filename)</code> <code>filename: str</code> <code>bool</code> Delete cache file <code>ListCacheFiles()</code> - <code>list</code> All cache files <code>ClearCache()</code> - <code>bool</code> Clear entire cache"},{"location":"en/api-reference/#cache-examples","title":"Cache Examples","text":"<pre><code>import toolos as engine\nimport json\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Cache data\n        user_data = {\"name\": \"John\", \"score\": 1500}\n        self.Cache.WriteCacheFile(\"user_data.json\", json.dumps(user_data))\n\n        # Load data from cache\n        if self.Cache.CacheExists(\"user_data.json\"):\n            cached_data = self.Cache.ReadCacheFile(\"user_data.json\")\n            user_data = json.loads(cached_data)\n            print(f\"Username: {user_data['name']}\")\n</code></pre>"},{"location":"en/api-reference/#statemachine-api","title":"\ud83d\udd04 StateMachine API","text":"Method Parameters Returns Description <code>SetState(state)</code> <code>state: str</code> <code>bool</code> Set state <code>GetState()</code> - <code>str</code> Get current state <code>IsState(state)</code> <code>state: str</code> <code>bool</code> Check state <code>PreviousState()</code> - <code>str</code> Get previous state <code>StateHistory()</code> - <code>list</code> State history <code>ResetState()</code> - <code>bool</code> Reset state"},{"location":"en/api-reference/#statemachine-examples","title":"StateMachine Examples","text":"<pre><code>import toolos as engine\n\nclass AppStates:\n    MAIN_MENU = \"main_menu\"\n    SETTINGS = \"settings\"\n    GAME = \"game\"\n    EXIT = \"exit\"\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.States = AppStates()\n\n    def Run(self):\n        self.StateMachine.SetState(self.States.MAIN_MENU)\n\n        while True:\n            current_state = self.StateMachine.GetState()\n\n            if self.StateMachine.IsState(self.States.MAIN_MENU):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(self.States.SETTINGS):\n                self.ShowSettings()\n            elif self.StateMachine.IsState(self.States.EXIT):\n                break\n</code></pre>"},{"location":"en/api-reference/#temp-api","title":"\ud83d\udcc4 Temp API","text":"Method Parameters Returns Description <code>WriteTempFile(filename, data)</code> <code>filename: str, data: str</code> <code>bool</code> Write temp file <code>ReadTempFile(filename)</code> <code>filename: str</code> <code>str</code> Read temp file <code>TempExists(filename)</code> <code>filename: str</code> <code>bool</code> Temp file exists <code>DeleteTempFile(filename)</code> <code>filename: str</code> <code>bool</code> Delete temp file <code>ListTempFiles()</code> - <code>list</code> All temp files <code>ClearTemp()</code> - <code>bool</code> Clear temp folder"},{"location":"en/api-reference/#temp-examples","title":"Temp Examples","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Create temporary file\n        temp_data = \"Temporary processing data\"\n        self.Temp.WriteTempFile(\"processing.txt\", temp_data)\n\n        # Process temporary file\n        if self.Temp.TempExists(\"processing.txt\"):\n            data = self.Temp.ReadTempFile(\"processing.txt\")\n            # Processing...\n            self.Temp.DeleteTempFile(\"processing.txt\")\n</code></pre>"},{"location":"en/api-reference/#log-api","title":"\ud83d\udcdd Log API","text":"Method Parameters Returns Description <code>WriteLog(filename, message)</code> <code>filename: str, message: str</code> <code>bool</code> Write log entry <code>ReadLog(filename)</code> <code>filename: str</code> <code>str</code> Read log file <code>CreateLogFile(filename)</code> <code>filename: str</code> <code>bool</code> Create log file <code>LogExists(filename)</code> <code>filename: str</code> <code>bool</code> Log file exists <code>ClearLog(filename)</code> <code>filename: str</code> <code>bool</code> Clear log file <code>ListLogFiles()</code> - <code>list</code> All log files"},{"location":"en/api-reference/#log-examples","title":"Log Examples","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Initialize logging\n        self.Log.CreateLogFile(\"app.log\")\n\n        # Write log entries\n        self.Log.WriteLog(\"app.log\", \"Application started\")\n        self.Log.WriteLog(\"app.log\", \"User logged in\")\n        self.Log.WriteLog(\"error.log\", \"Database connection failed\")\n\n        # Read logs\n        app_logs = self.Log.ReadLog(\"app.log\")\n        print(\"App Logs:\", app_logs)\n</code></pre>"},{"location":"en/api-reference/#package-api","title":"\ud83d\udce6 Package API","text":"Method Parameters Returns Description <code>LoadPackage(package_name)</code> <code>package_name: str</code> <code>object</code> Load package <code>GetPackageInfo(package_name)</code> <code>package_name: str</code> <code>dict</code> Package information <code>ListPackages()</code> - <code>list</code> All packages <code>PackageExists(package_name)</code> <code>package_name: str</code> <code>bool</code> Package exists <code>ReloadPackage(package_name)</code> <code>package_name: str</code> <code>bool</code> Reload package <code>UnloadPackage(package_name)</code> <code>package_name: str</code> <code>bool</code> Unload package"},{"location":"en/api-reference/#package-examples","title":"Package Examples","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Load package\n        shopping_mod = self.Package.LoadPackage(\"Shopping\")\n        task_manager = self.Package.LoadPackage(\"TaskManager\")\n\n        # Get package information\n        package_info = self.Package.GetPackageInfo(\"Shopping\")\n        print(f\"Package: {package_info['name']} v{package_info['version']}\")\n\n        # List all available packages\n        packages = self.Package.ListPackages()\n        for package in packages:\n            print(f\"- {package}\")\n</code></pre>"},{"location":"en/api-reference/#complete-app-example","title":"\ud83d\ude80 Complete App Example","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # App-specific initialization\n        self.AppName = \"My ToolOS App\"\n        self.Version = \"1.0.0\"\n\n        # Initialize logging\n        self.Log.CreateLogFile(\"app.log\")\n        self.Log.WriteLog(\"app.log\", f\"{self.AppName} v{self.Version} started\")\n\n        # Load default configuration\n        self.InitializeConfig()\n\n    def InitializeConfig(self):\n        \"\"\"Initialize app configuration\"\"\"\n        if not self.Cache.CacheExists(\"app_config.json\"):\n            import json\n            default_config = {\n                \"theme\": \"dark\",\n                \"auto_save\": True,\n                \"notifications\": True\n            }\n            self.Cache.WriteCacheFile(\"app_config.json\", json.dumps(default_config))\n\n    def Run(self):\n        \"\"\"Main app loop\"\"\"\n        while True:\n            if self.StateMachine.IsState(\"main_menu\"):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(\"exit\"):\n                self.Cleanup()\n                break\n\n    def ShowMainMenu(self):\n        \"\"\"Show main menu\"\"\"\n        print(self.Language.Translate(\"welcome\"))\n        # Menu logic...\n\n    def Cleanup(self):\n        \"\"\"Clean up before exit\"\"\"\n        self.Log.WriteLog(\"app.log\", f\"{self.AppName} shutting down\")\n        self.Temp.ClearTemp()  # Clear temporary files\n\nif __name__ == \"__main__\":\n    app = MyApp()\n    app.Run()\n</code></pre>"},{"location":"en/api-reference/#error-handling","title":"\ud83c\udfaf Error Handling","text":"<pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def SafeOperation(self):\n        try:\n            # Critical operation\n            data = self.Cache.ReadCacheFile(\"important_data.json\")\n            result = self.ProcessData(data)\n            return result\n\n        except FileNotFoundError:\n            self.Log.WriteLog(\"error.log\", \"Important data file not found\")\n            return None\n\n        except Exception as e:\n            self.Log.WriteLog(\"error.log\", f\"Unexpected error: {str(e)}\")\n            return None\n\n    def ProcessData(self, data):\n        # Data processing\n        pass\n</code></pre>"},{"location":"en/api-reference/#performance-tips","title":"\ud83d\udcca Performance Tips","text":"<ol> <li>Use Caching: Cache frequently used data</li> <li>Optimize Logging: Don't log too verbosely</li> <li>Temp Files: Store large data temporarily</li> <li>State Management: Clean state transitions</li> <li>Language Loading: Load languages only when needed</li> <li>Package Loading: Load packages lazily</li> </ol>"},{"location":"en/engine/","title":"Engine API","text":"<p>Complete documentation for the ToolOS Engine API with inheritance-based architecture.</p>"},{"location":"en/engine/#base-class-engineapi","title":"\ud83c\udfd7\ufe0f Base Class: engine.Api","text":"<p>The <code>engine.Api</code> class is the foundation of all ToolOS applications. When you inherit from this class, you get access to all framework APIs through simple inheritance.</p> <pre><code>import toolos as engine\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        # All APIs now available as self.Settings, self.Language, etc.\n</code></pre>"},{"location":"en/engine/#constructor-parameters","title":"\ud83d\udccb Constructor Parameters","text":"Parameter Type Required Description <code>settings_file</code> <code>str</code> Yes Path to your settings JSON file"},{"location":"en/engine/#example-constructor-calls","title":"Example Constructor Calls","text":"<pre><code># Basic initialization\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n# With relative path\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"config/app_settings.json\")\n\n# With absolute path\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"/path/to/settings.json\")\n</code></pre>"},{"location":"en/engine/#available-apis-after-inheritance","title":"\ud83c\udfaf Available APIs After Inheritance","text":"<p>Once you inherit from <code>engine.Api</code>, these APIs are available:</p>"},{"location":"en/engine/#core-apis","title":"Core APIs","text":"<ul> <li><code>self.Settings</code> - Configuration management</li> <li><code>self.Language</code> - Multi-language support</li> <li><code>self.Cache</code> - Data caching system</li> <li><code>self.StateMachine</code> - State management</li> <li><code>self.Temp</code> - Temporary file handling</li> <li><code>self.Log</code> - Logging system</li> <li><code>self.Package</code> - Package/mod loading</li> </ul>"},{"location":"en/engine/#settings-api","title":"\u2699\ufe0f Settings API","text":"<p>Manage application configuration with ease.</p>"},{"location":"en/engine/#methods","title":"Methods","text":"<pre><code># Get global settings\napp_version = self.Settings.Global(\"app_version\")\ndebug_mode = self.Settings.Global(\"debug_mode\")\n\n# Get user settings  \ntheme = self.Settings.User(\"theme\")\nlanguage = self.Settings.User(\"language\")\n\n# Set settings\nself.Settings.SetGlobal(\"app_version\", \"2.0.0\")\nself.Settings.SetUser(\"theme\", \"dark\")\n\n# Save changes\nself.Settings.Save()\n</code></pre>"},{"location":"en/engine/#complete-example","title":"Complete Example","text":"<pre><code>import toolos as engine\n\nclass ConfigApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Load application configuration\n        self.LoadConfiguration()\n\n    def LoadConfiguration(self):\n        \"\"\"Load and validate configuration\"\"\"\n        # Get global settings\n        self.AppVersion = self.Settings.Global(\"app_version\")\n        self.DebugMode = self.Settings.Global(\"debug_mode\") == \"true\"\n\n        # Get user preferences\n        self.UserTheme = self.Settings.User(\"theme\")\n        self.AutoSave = self.Settings.User(\"auto_save\") == \"true\"\n\n        # Set defaults if not found\n        if not self.AppVersion:\n            self.Settings.SetGlobal(\"app_version\", \"1.0.0\")\n            self.AppVersion = \"1.0.0\"\n\n        if not self.UserTheme:\n            self.Settings.SetUser(\"theme\", \"dark\")\n            self.UserTheme = \"dark\"\n\n        # Save any new defaults\n        self.Settings.Save()\n\n    def UpdateUserPreferences(self, theme, auto_save):\n        \"\"\"Update user preferences\"\"\"\n        self.Settings.SetUser(\"theme\", theme)\n        self.Settings.SetUser(\"auto_save\", \"true\" if auto_save else \"false\")\n        self.Settings.Save()\n\n        # Update local variables\n        self.UserTheme = theme\n        self.AutoSave = auto_save\n</code></pre>"},{"location":"en/engine/#language-api","title":"\ud83c\udf0d Language API","text":"<p>Add multi-language support to your applications.</p>"},{"location":"en/engine/#methods_1","title":"Methods","text":"<pre><code># Translate text\nwelcome_text = self.Language.Translate(\"welcome\")\nmenu_title = self.Language.Translate(\"main_menu\")\n\n# Change language\nself.Language.SetLanguage(\"de\")  # German\nself.Language.SetLanguage(\"en\")  # English\n\n# Get available languages\nlanguages = self.Language.GetAvailableLanguages()\n\n# Get current language\ncurrent = self.Language.GetCurrentLanguage()\n</code></pre>"},{"location":"en/engine/#multi-language-application-example","title":"Multi-Language Application Example","text":"<pre><code>import toolos as engine\n\nclass MultiLangApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Initialize with user's preferred language\n        preferred_lang = self.Settings.User(\"language\")\n        if preferred_lang:\n            self.Language.SetLanguage(preferred_lang)\n\n    def ShowLanguageMenu(self):\n        \"\"\"Display language selection menu\"\"\"\n        print(f\"\\n=== {self.Language.Translate('language_selection')} ===\")\n\n        languages = self.Language.GetAvailableLanguages()\n        current_lang = self.Language.GetCurrentLanguage()\n\n        for i, lang in enumerate(languages):\n            indicator = \" \u2713\" if lang == current_lang else \"  \"\n            print(f\"{i + 1}.{indicator} {lang.upper()}\")\n\n        print()\n        try:\n            choice = int(input(self.Language.Translate(\"select_language\"))) - 1\n            if 0 &lt;= choice &lt; len(languages):\n                new_lang = languages[choice]\n                self.Language.SetLanguage(new_lang)\n\n                # Save preference\n                self.Settings.SetUser(\"language\", new_lang)\n                self.Settings.Save()\n\n                print(self.Language.Translate(\"language_changed\"))\n            else:\n                print(self.Language.Translate(\"invalid_selection\"))\n        except ValueError:\n            print(self.Language.Translate(\"invalid_input\"))\n\n    def DisplayLocalizedMenu(self):\n        \"\"\"Show menu in current language\"\"\"\n        print(f\"\\n{self.Language.Translate('welcome')}\")\n        print(f\"=== {self.Language.Translate('main_menu')} ===\")\n\n        menu_items = [\n            self.Language.Translate(\"start_game\"),\n            self.Language.Translate(\"settings\"),\n            self.Language.Translate(\"help\"),\n            self.Language.Translate(\"exit\")\n        ]\n\n        for i, item in enumerate(menu_items):\n            print(f\"{i + 1}. {item}\")\n</code></pre>"},{"location":"en/engine/#cache-api","title":"\ud83d\udcbe Cache API","text":"<p>Efficient data persistence and caching.</p>"},{"location":"en/engine/#methods_2","title":"Methods","text":"<pre><code>import json\n\n# Write cache file\nuser_data = {\"name\": \"John\", \"score\": 1500}\nself.Cache.WriteCacheFile(\"user.json\", json.dumps(user_data))\n\n# Read cache file\nif self.Cache.CacheExists(\"user.json\"):\n    data = self.Cache.ReadCacheFile(\"user.json\")\n    user_data = json.loads(data)\n\n# Delete cache file\nself.Cache.DeleteCacheFile(\"old_data.json\")\n\n# List all cache files\ncache_files = self.Cache.ListCacheFiles()\n</code></pre>"},{"location":"en/engine/#advanced-cache-example","title":"Advanced Cache Example","text":"<pre><code>import toolos as engine\nimport json\n\nclass DataApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Load cached user data\n        self.LoadUserData()\n\n    def LoadUserData(self):\n        \"\"\"Load user data from cache\"\"\"\n        if self.Cache.CacheExists(\"user_profile.json\"):\n            try:\n                cached_data = self.Cache.ReadCacheFile(\"user_profile.json\")\n                self.UserProfile = json.loads(cached_data)\n                self.Log.WriteLog(\"app.log\", \"User profile loaded from cache\")\n            except json.JSONDecodeError:\n                self.Log.WriteLog(\"error.log\", \"Invalid JSON in user profile cache\")\n                self.CreateDefaultProfile()\n        else:\n            self.CreateDefaultProfile()\n\n    def CreateDefaultProfile(self):\n        \"\"\"Create default user profile\"\"\"\n        self.UserProfile = {\n            \"name\": \"Guest\",\n            \"level\": 1,\n            \"score\": 0,\n            \"settings\": {\n                \"difficulty\": \"normal\",\n                \"sound\": True,\n                \"notifications\": True\n            },\n            \"statistics\": {\n                \"games_played\": 0,\n                \"total_time\": 0,\n                \"achievements\": []\n            }\n        }\n        self.SaveUserData()\n\n    def SaveUserData(self):\n        \"\"\"Save user data to cache\"\"\"\n        profile_data = json.dumps(self.UserProfile, indent=2)\n        self.Cache.WriteCacheFile(\"user_profile.json\", profile_data)\n        self.Log.WriteLog(\"app.log\", \"User profile saved to cache\")\n\n    def UpdateUserStats(self, games_played=0, time_played=0):\n        \"\"\"Update user statistics\"\"\"\n        stats = self.UserProfile[\"statistics\"]\n        stats[\"games_played\"] += games_played\n        stats[\"total_time\"] += time_played\n\n        self.SaveUserData()\n\n    def AddAchievement(self, achievement_id, title, description):\n        \"\"\"Add achievement to user profile\"\"\"\n        achievement = {\n            \"id\": achievement_id,\n            \"title\": title,\n            \"description\": description,\n            \"earned_date\": self.GetCurrentTimestamp()\n        }\n\n        self.UserProfile[\"statistics\"][\"achievements\"].append(achievement)\n        self.SaveUserData()\n\n        self.Log.WriteLog(\"achievements.log\", \n                         f\"Achievement earned: {title}\")\n\n    def GetCurrentTimestamp(self):\n        \"\"\"Get current timestamp\"\"\"\n        import datetime\n        return datetime.datetime.now().isoformat()\n</code></pre>"},{"location":"en/engine/#statemachine-api","title":"\ud83d\udd04 StateMachine API","text":"<p>Manage application states and flow.</p>"},{"location":"en/engine/#methods_3","title":"Methods","text":"<pre><code># Set current state\nself.StateMachine.SetState(\"main_menu\")\n\n# Get current state\ncurrent_state = self.StateMachine.GetState()\n\n# Check if in specific state\nif self.StateMachine.IsState(\"game_playing\"):\n    # Handle game state\n    pass\n\n# Get previous state\nprevious = self.StateMachine.PreviousState()\n</code></pre>"},{"location":"en/engine/#state-machine-application","title":"State Machine Application","text":"<pre><code>import toolos as engine\n\nclass GameStates:\n    MAIN_MENU = \"main_menu\"\n    GAME_SETUP = \"game_setup\"\n    PLAYING = \"playing\" \n    PAUSED = \"paused\"\n    GAME_OVER = \"game_over\"\n    SETTINGS = \"settings\"\n    EXIT = \"exit\"\n\nclass GameApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.States = GameStates()\n        self.GameScore = 0\n        self.GameLevel = 1\n\n    def Run(self):\n        \"\"\"Main game loop with state management\"\"\"\n        self.StateMachine.SetState(self.States.MAIN_MENU)\n\n        while True:\n            current_state = self.StateMachine.GetState()\n\n            if self.StateMachine.IsState(self.States.MAIN_MENU):\n                self.HandleMainMenu()\n            elif self.StateMachine.IsState(self.States.GAME_SETUP):\n                self.HandleGameSetup()\n            elif self.StateMachine.IsState(self.States.PLAYING):\n                self.HandleGamePlaying()\n            elif self.StateMachine.IsState(self.States.PAUSED):\n                self.HandleGamePaused()\n            elif self.StateMachine.IsState(self.States.GAME_OVER):\n                self.HandleGameOver()\n            elif self.StateMachine.IsState(self.States.SETTINGS):\n                self.HandleSettings()\n            elif self.StateMachine.IsState(self.States.EXIT):\n                break\n\n    def HandleMainMenu(self):\n        \"\"\"Handle main menu state\"\"\"\n        print(f\"\\n=== {self.Language.Translate('main_menu')} ===\")\n        print(f\"1. {self.Language.Translate('new_game')}\")\n        print(f\"2. {self.Language.Translate('settings')}\")\n        print(f\"3. {self.Language.Translate('exit')}\")\n\n        choice = input(self.Language.Translate(\"input\"))\n\n        if choice == \"1\":\n            self.StateMachine.SetState(self.States.GAME_SETUP)\n        elif choice == \"2\":\n            self.StateMachine.SetState(self.States.SETTINGS)\n        elif choice == \"3\":\n            self.StateMachine.SetState(self.States.EXIT)\n\n    def HandleGamePlaying(self):\n        \"\"\"Handle game playing state\"\"\"\n        print(f\"\\n{self.Language.Translate('game_playing')}\")\n        print(f\"Score: {self.GameScore} | Level: {self.GameLevel}\")\n        print(\"P - Pause | Q - Quit\")\n\n        action = input().upper()\n\n        if action == \"P\":\n            self.StateMachine.SetState(self.States.PAUSED)\n        elif action == \"Q\":\n            self.StateMachine.SetState(self.States.GAME_OVER)\n        else:\n            # Simulate game logic\n            self.GameScore += 10\n            if self.GameScore % 100 == 0:\n                self.GameLevel += 1\n\n    def HandleGamePaused(self):\n        \"\"\"Handle game paused state\"\"\"\n        print(f\"\\n{self.Language.Translate('game_paused')}\")\n        print(\"R - Resume | Q - Quit\")\n\n        action = input().upper()\n\n        if action == \"R\":\n            self.StateMachine.SetState(self.States.PLAYING)\n        elif action == \"Q\":\n            self.StateMachine.SetState(self.States.GAME_OVER)\n</code></pre>"},{"location":"en/engine/#logging-api","title":"\ud83d\udcdd Logging API","text":"<p>Comprehensive logging system for debugging and monitoring.</p>"},{"location":"en/engine/#methods_4","title":"Methods","text":"<pre><code># Create log file\nself.Log.CreateLogFile(\"app.log\")\n\n# Write log entries\nself.Log.WriteLog(\"app.log\", \"Application started\")\nself.Log.WriteLog(\"error.log\", \"Database connection failed\")\n\n# Read log file\nlogs = self.Log.ReadLog(\"app.log\")\n</code></pre>"},{"location":"en/engine/#logging-best-practices","title":"Logging Best Practices","text":"<pre><code>import toolos as engine\n\nclass LoggingApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Initialize logging system\n        self.InitializeLogging()\n\n    def InitializeLogging(self):\n        \"\"\"Set up logging system\"\"\"\n        # Create different log files for different purposes\n        self.Log.CreateLogFile(\"app.log\")      # General application logs\n        self.Log.CreateLogFile(\"error.log\")    # Error logs\n        self.Log.CreateLogFile(\"user.log\")     # User activity logs\n        self.Log.CreateLogFile(\"debug.log\")    # Debug information\n\n        # Log application startup\n        self.Log.WriteLog(\"app.log\", \"=== Application Started ===\")\n        self.Log.WriteLog(\"app.log\", f\"Version: {self.GetVersion()}\")\n        self.Log.WriteLog(\"app.log\", f\"Language: {self.Language.GetCurrentLanguage()}\")\n\n    def LogUserAction(self, action, details=\"\"):\n        \"\"\"Log user actions\"\"\"\n        import datetime\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        log_entry = f\"[{timestamp}] User Action: {action}\"\n        if details:\n            log_entry += f\" - {details}\"\n\n        self.Log.WriteLog(\"user.log\", log_entry)\n\n    def LogError(self, error_type, message, details=\"\"):\n        \"\"\"Log errors with context\"\"\"\n        import datetime\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n        error_entry = f\"[{timestamp}] ERROR: {error_type} - {message}\"\n        if details:\n            error_entry += f\"\\nDetails: {details}\"\n\n        self.Log.WriteLog(\"error.log\", error_entry)\n\n    def LogDebug(self, component, message):\n        \"\"\"Log debug information\"\"\"\n        debug_mode = self.Settings.Global(\"debug_mode\") == \"true\"\n        if debug_mode:\n            import datetime\n            timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            debug_entry = f\"[{timestamp}] DEBUG [{component}]: {message}\"\n            self.Log.WriteLog(\"debug.log\", debug_entry)\n\n    def GetVersion(self):\n        \"\"\"Get application version\"\"\"\n        return self.Settings.Global(\"app_version\") or \"1.0.0\"\n\n    def HandleCriticalError(self, error):\n        \"\"\"Handle critical errors\"\"\"\n        self.LogError(\"CRITICAL\", str(error))\n\n        # Also log to console for immediate attention\n        print(f\"CRITICAL ERROR: {error}\")\n\n        # Save application state before potential crash\n        self.SaveEmergencyState()\n\n    def SaveEmergencyState(self):\n        \"\"\"Save emergency state in case of critical error\"\"\"\n        import json\n        emergency_data = {\n            \"timestamp\": self.GetCurrentTimestamp(),\n            \"state\": self.StateMachine.GetState(),\n            \"settings\": {\n                \"language\": self.Language.GetCurrentLanguage(),\n                \"theme\": self.Settings.User(\"theme\")\n            }\n        }\n\n        emergency_json = json.dumps(emergency_data, indent=2)\n        self.Cache.WriteCacheFile(\"emergency_state.json\", emergency_json)\n        self.Log.WriteLog(\"app.log\", \"Emergency state saved\")\n</code></pre>"},{"location":"en/engine/#complete-application-example","title":"\ud83d\udd27 Complete Application Example","text":"<p>Here's a complete example showing all APIs working together:</p> <pre><code>import toolos as engine\nimport json\n\nclass AppStates:\n    STARTUP = \"startup\"\n    MAIN_MENU = \"main_menu\"\n    USER_PROFILE = \"user_profile\"\n    SETTINGS = \"settings\"\n    EXIT = \"exit\"\n\nclass CompleteApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Application info\n        self.AppName = \"Complete ToolOS Example\"\n        self.Version = \"1.0.0\"\n        self.States = AppStates()\n\n        # Initialize systems\n        self.InitializeSystems()\n\n    def InitializeSystems(self):\n        \"\"\"Initialize all systems\"\"\"\n        # Logging\n        self.Log.CreateLogFile(\"app.log\")\n        self.Log.WriteLog(\"app.log\", f\"{self.AppName} v{self.Version} initializing\")\n\n        # Load user preferences\n        self.LoadUserPreferences()\n\n        # Load application data\n        self.LoadApplicationData()\n\n    def LoadUserPreferences(self):\n        \"\"\"Load user preferences from cache\"\"\"\n        if self.Cache.CacheExists(\"user_prefs.json\"):\n            try:\n                prefs_data = self.Cache.ReadCacheFile(\"user_prefs.json\")\n                self.UserPrefs = json.loads(prefs_data)\n\n                # Apply language preference\n                if \"language\" in self.UserPrefs:\n                    self.Language.SetLanguage(self.UserPrefs[\"language\"])\n\n            except json.JSONDecodeError:\n                self.CreateDefaultPreferences()\n        else:\n            self.CreateDefaultPreferences()\n\n    def CreateDefaultPreferences(self):\n        \"\"\"Create default user preferences\"\"\"\n        self.UserPrefs = {\n            \"language\": \"en\",\n            \"theme\": \"dark\",\n            \"auto_save\": True,\n            \"notifications\": True\n        }\n        self.SaveUserPreferences()\n\n    def SaveUserPreferences(self):\n        \"\"\"Save user preferences to cache\"\"\"\n        prefs_data = json.dumps(self.UserPrefs, indent=2)\n        self.Cache.WriteCacheFile(\"user_prefs.json\", prefs_data)\n\n    def LoadApplicationData(self):\n        \"\"\"Load application-specific data\"\"\"\n        if self.Cache.CacheExists(\"app_data.json\"):\n            try:\n                app_data = self.Cache.ReadCacheFile(\"app_data.json\")\n                self.AppData = json.loads(app_data)\n            except json.JSONDecodeError:\n                self.CreateDefaultAppData()\n        else:\n            self.CreateDefaultAppData()\n\n    def CreateDefaultAppData(self):\n        \"\"\"Create default application data\"\"\"\n        self.AppData = {\n            \"user_count\": 0,\n            \"session_count\": 0,\n            \"last_used\": None,\n            \"features_used\": []\n        }\n        self.SaveApplicationData()\n\n    def SaveApplicationData(self):\n        \"\"\"Save application data to cache\"\"\"\n        app_data = json.dumps(self.AppData, indent=2)\n        self.Cache.WriteCacheFile(\"app_data.json\", app_data)\n\n    def Run(self):\n        \"\"\"Main application loop\"\"\"\n        self.StateMachine.SetState(self.States.STARTUP)\n\n        while True:\n            if self.StateMachine.IsState(self.States.STARTUP):\n                self.HandleStartup()\n            elif self.StateMachine.IsState(self.States.MAIN_MENU):\n                self.HandleMainMenu()\n            elif self.StateMachine.IsState(self.States.USER_PROFILE):\n                self.HandleUserProfile()\n            elif self.StateMachine.IsState(self.States.SETTINGS):\n                self.HandleSettings()\n            elif self.StateMachine.IsState(self.States.EXIT):\n                self.HandleExit()\n                break\n\n    def HandleStartup(self):\n        \"\"\"Handle application startup\"\"\"\n        print(f\"\\n{self.Language.Translate('welcome')}\")\n        print(f\"=== {self.AppName} v{self.Version} ===\")\n\n        # Update session count\n        self.AppData[\"session_count\"] += 1\n        self.SaveApplicationData()\n\n        # Log startup\n        self.Log.WriteLog(\"app.log\", \"Application startup completed\")\n\n        # Move to main menu\n        self.StateMachine.SetState(self.States.MAIN_MENU)\n\n    def HandleMainMenu(self):\n        \"\"\"Handle main menu\"\"\"\n        print(f\"\\n=== {self.Language.Translate('main_menu')} ===\")\n\n        menu_options = [\n            self.Language.Translate(\"user_profile\"),\n            self.Language.Translate(\"settings\"),\n            self.Language.Translate(\"exit\")\n        ]\n\n        for i, option in enumerate(menu_options):\n            print(f\"{i + 1}. {option}\")\n\n        choice = input(f\"\\n{self.Language.Translate('input')}\")\n\n        if choice == \"1\":\n            self.StateMachine.SetState(self.States.USER_PROFILE)\n        elif choice == \"2\":\n            self.StateMachine.SetState(self.States.SETTINGS)\n        elif choice == \"3\":\n            self.StateMachine.SetState(self.States.EXIT)\n        else:\n            print(self.Language.Translate(\"invalid_choice\"))\n\n    def HandleExit(self):\n        \"\"\"Handle application exit\"\"\"\n        self.Log.WriteLog(\"app.log\", \"Application shutting down\")\n\n        # Update last used timestamp\n        import datetime\n        self.AppData[\"last_used\"] = datetime.datetime.now().isoformat()\n        self.SaveApplicationData()\n\n        # Clear temporary files\n        self.Temp.ClearTemp()\n\n        print(f\"\\n{self.Language.Translate('goodbye')}\")\n\nif __name__ == \"__main__\":\n    app = CompleteApp()\n    app.Run()\n</code></pre> <p>This comprehensive Engine API guide shows you how to build professional applications with ToolOS inheritance-based architecture. Ready to create mods? Check out our Modding SDK! \ud83d\ude80</p>"},{"location":"en/getting-started/","title":"Getting Started","text":"<p>Create your first ToolOS application in minutes with our inheritance-based architecture.</p>"},{"location":"en/getting-started/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Python 3.7 or higher</li> <li>Basic knowledge of Python classes and inheritance</li> </ul>"},{"location":"en/getting-started/#installation","title":"\ud83d\ude80 Installation","text":""},{"location":"en/getting-started/#step-1-download-toolos-sdk","title":"Step 1: Download ToolOS SDK","text":"<pre><code>git clone https://github.com/claytechnologie/ToolSDK.git\ncd ToolSDK\n</code></pre>"},{"location":"en/getting-started/#step-2-project-structure","title":"Step 2: Project Structure","text":"<p>Create your project with this structure:</p> <pre><code>MyProject/\n\u251c\u2500\u2500 settings.json        # Application settings\n\u251c\u2500\u2500 app.py              # Your main application\n\u2514\u2500\u2500 data/\n    \u2514\u2500\u2500 lang/           # Language files\n        \u251c\u2500\u2500 de.json     # German translations\n        \u251c\u2500\u2500 en.json     # English translations\n        \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"en/getting-started/#your-first-application","title":"\ud83c\udfd7\ufe0f Your First Application","text":""},{"location":"en/getting-started/#step-1-create-settingsjson","title":"Step 1: Create settings.json","text":"<pre><code>{\n    \"global\": {\n        \"language\": \"en\",\n        \"app_version\": \"1.0.0\",\n        \"debug_mode\": false\n    },\n    \"user\": {\n        \"theme\": \"dark\",\n        \"auto_save\": true\n    }\n}\n</code></pre>"},{"location":"en/getting-started/#step-2-create-language-files","title":"Step 2: Create Language Files","text":"<p>data/lang/en.json: <pre><code>{\n    \"welcome\": \"Welcome to my application!\",\n    \"main_menu\": \"Main Menu\",\n    \"settings\": \"Settings\",\n    \"exit\": \"Exit\",\n    \"input\": \"Your choice: &gt; \"\n}\n</code></pre></p> <p>data/lang/de.json: <pre><code>{\n    \"welcome\": \"Willkommen in meiner Anwendung!\",\n    \"main_menu\": \"Hauptmen\u00fc\",\n    \"settings\": \"Einstellungen\", \n    \"exit\": \"Beenden\",\n    \"input\": \"Ihre Wahl: &gt; \"\n}\n</code></pre></p>"},{"location":"en/getting-started/#step-3-create-your-application","title":"Step 3: Create Your Application","text":"<p>app.py: <pre><code>import toolos as engine\n\nclass AppStates:\n    MAIN_MENU = \"main_menu\"\n    SETTINGS = \"settings\" \n    EXIT = \"exit\"\n\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n\n        # Application info\n        self.AppName = \"My First ToolOS App\"\n        self.Version = \"1.0.0\"\n        self.States = AppStates()\n\n        # Initialize logging\n        self.Log.CreateLogFile(\"app.log\")\n        self.Log.WriteLog(\"app.log\", f\"{self.AppName} v{self.Version} started\")\n\n        # Load application configuration\n        self.LoadAppConfig()\n\n    def LoadAppConfig(self):\n        \"\"\"Load or create application configuration\"\"\"\n        if not self.Cache.CacheExists(\"app_config.json\"):\n            import json\n            default_config = {\n                \"theme\": \"dark\",\n                \"notifications\": True,\n                \"auto_save\": True\n            }\n\n            config_data = json.dumps(default_config, indent=2)\n            self.Cache.WriteCacheFile(\"app_config.json\", config_data)\n            self.AppConfig = default_config\n        else:\n            import json\n            config_data = self.Cache.ReadCacheFile(\"app_config.json\")\n            self.AppConfig = json.loads(config_data)\n\n    def Run(self):\n        \"\"\"Main application loop\"\"\"\n        self.StateMachine.SetState(self.States.MAIN_MENU)\n\n        while True:\n            current_state = self.StateMachine.GetState()\n\n            if self.StateMachine.IsState(self.States.MAIN_MENU):\n                self.ShowMainMenu()\n            elif self.StateMachine.IsState(self.States.SETTINGS):\n                self.ShowSettings()\n            elif self.StateMachine.IsState(self.States.EXIT):\n                self.Cleanup()\n                break\n\n    def ShowMainMenu(self):\n        \"\"\"Display main menu\"\"\"\n        print(f\"\\n{self.Language.Translate('welcome')}\")\n        print(f\"=== {self.AppName} v{self.Version} ===\\n\")\n\n        menu_options = [\n            self.Language.Translate(\"settings\"),\n            self.Language.Translate(\"exit\")\n        ]\n\n        for i, option in enumerate(menu_options):\n            print(f\"{i + 1}. {option}\")\n\n        print()\n        choice = input(self.Language.Translate(\"input\"))\n\n        if choice == \"1\":\n            self.StateMachine.SetState(self.States.SETTINGS)\n        elif choice == \"2\":\n            self.StateMachine.SetState(self.States.EXIT)\n        else:\n            print(\"Invalid choice!\")\n\n    def ShowSettings(self):\n        \"\"\"Display settings menu\"\"\"\n        print(f\"\\n=== {self.Language.Translate('settings')} ===\")\n        print(\"1. Change Language\")\n        print(\"2. Toggle Theme\")\n        print(\"3. Back to Main Menu\")\n\n        choice = input(self.Language.Translate(\"input\"))\n\n        if choice == \"1\":\n            self.ChangeLanguage()\n        elif choice == \"2\":\n            self.ToggleTheme()\n        elif choice == \"3\":\n            self.StateMachine.SetState(self.States.MAIN_MENU)\n\n    def ChangeLanguage(self):\n        \"\"\"Change application language\"\"\"\n        languages = self.Language.GetAvailableLanguages()\n\n        print(\"\\nAvailable languages:\")\n        for i, lang in enumerate(languages):\n            current = \" (current)\" if lang == self.Language.GetCurrentLanguage() else \"\"\n            print(f\"{i + 1}. {lang}{current}\")\n\n        try:\n            choice = int(input(\"Select language: \")) - 1\n            if 0 &lt;= choice &lt; len(languages):\n                selected_lang = languages[choice]\n                self.Language.SetLanguage(selected_lang)\n                self.Settings.SetGlobal(\"language\", selected_lang)\n                self.Settings.Save()\n\n                self.Log.WriteLog(\"app.log\", f\"Language changed to: {selected_lang}\")\n                print(f\"Language changed to: {selected_lang}\")\n            else:\n                print(\"Invalid selection!\")\n        except ValueError:\n            print(\"Please enter a number!\")\n\n    def ToggleTheme(self):\n        \"\"\"Toggle application theme\"\"\"\n        current_theme = self.AppConfig.get(\"theme\", \"dark\")\n        new_theme = \"light\" if current_theme == \"dark\" else \"dark\"\n\n        self.AppConfig[\"theme\"] = new_theme\n\n        import json\n        config_data = json.dumps(self.AppConfig, indent=2)\n        self.Cache.WriteCacheFile(\"app_config.json\", config_data)\n\n        self.Log.WriteLog(\"app.log\", f\"Theme changed to: {new_theme}\")\n        print(f\"Theme changed to: {new_theme}\")\n\n    def Cleanup(self):\n        \"\"\"Clean up before exit\"\"\"\n        self.Log.WriteLog(\"app.log\", f\"{self.AppName} shutting down\")\n\n        # Clear temporary files\n        self.Temp.ClearTemp()\n\n        print(f\"\\n{self.Language.Translate('exit')}...\")\n        print(\"Goodbye!\")\n\nif __name__ == \"__main__\":\n    app = MyApp()\n    app.Run()\n</code></pre></p>"},{"location":"en/getting-started/#step-4-run-your-application","title":"Step 4: Run Your Application","text":"<pre><code>python app.py\n</code></pre>"},{"location":"en/getting-started/#understanding-the-code","title":"\ud83c\udfaf Understanding the Code","text":""},{"location":"en/getting-started/#inheritance-pattern","title":"Inheritance Pattern","text":"<p>ToolOS uses clean inheritance instead of composition:</p> <pre><code># \u2705 ToolOS way - Clean inheritance\nclass MyApp(engine.Api):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        # All APIs available as self.Settings, self.Language, etc.\n</code></pre>"},{"location":"en/getting-started/#available-apis-after-inheritance","title":"Available APIs After Inheritance","text":"<p>Once you inherit from <code>engine.Api</code>, you have access to:</p> <ul> <li><code>self.Settings</code> - Configuration management</li> <li><code>self.Language</code> - Multi-language support  </li> <li><code>self.Cache</code> - Data caching</li> <li><code>self.StateMachine</code> - State management</li> <li><code>self.Temp</code> - Temporary file handling</li> <li><code>self.Log</code> - Logging system</li> <li><code>self.Package</code> - Package/mod loading</li> </ul>"},{"location":"en/getting-started/#state-management","title":"State Management","text":"<p>ToolOS applications use state machines for clean flow:</p> <pre><code>class AppStates:\n    MAIN_MENU = \"main_menu\"\n    SETTINGS = \"settings\"\n    EXIT = \"exit\"\n\n# In your app loop:\nif self.StateMachine.IsState(self.States.MAIN_MENU):\n    self.ShowMainMenu()\nelif self.StateMachine.IsState(self.States.SETTINGS):\n    self.ShowSettings()\n</code></pre>"},{"location":"en/getting-started/#language-system","title":"Language System","text":"<p>Add multi-language support easily:</p> <pre><code># Text translation\nwelcome = self.Language.Translate(\"welcome\")\n\n# Language switching\nself.Language.SetLanguage(\"de\")  # Switch to German\nself.Language.SetLanguage(\"en\")  # Switch to English\n</code></pre>"},{"location":"en/getting-started/#advanced-features","title":"\ud83d\ude80 Advanced Features","text":""},{"location":"en/getting-started/#custom-configuration-loading","title":"Custom Configuration Loading","text":"<pre><code>def LoadAdvancedConfig(self):\n    \"\"\"Load advanced configuration with validation\"\"\"\n    config_file = \"advanced_config.json\"\n\n    if self.Cache.CacheExists(config_file):\n        import json\n        try:\n            config_data = self.Cache.ReadCacheFile(config_file)\n            config = json.loads(config_data)\n\n            # Validate configuration\n            required_keys = [\"database_url\", \"api_key\", \"max_connections\"]\n            for key in required_keys:\n                if key not in config:\n                    raise ValueError(f\"Missing required config key: {key}\")\n\n            self.AdvancedConfig = config\n            self.Log.WriteLog(\"app.log\", \"Advanced configuration loaded successfully\")\n\n        except (json.JSONDecodeError, ValueError) as e:\n            self.Log.WriteLog(\"error.log\", f\"Config error: {str(e)}\")\n            self.CreateDefaultAdvancedConfig()\n    else:\n        self.CreateDefaultAdvancedConfig()\n\ndef CreateDefaultAdvancedConfig(self):\n    \"\"\"Create default advanced configuration\"\"\"\n    import json\n    default_config = {\n        \"database_url\": \"sqlite:///app.db\",\n        \"api_key\": \"your-api-key-here\",\n        \"max_connections\": 10,\n        \"timeout\": 30,\n        \"retry_attempts\": 3\n    }\n\n    config_data = json.dumps(default_config, indent=2)\n    self.Cache.WriteCacheFile(\"advanced_config.json\", config_data)\n    self.AdvancedConfig = default_config\n</code></pre>"},{"location":"en/getting-started/#error-handling","title":"Error Handling","text":"<pre><code>def SafeOperation(self):\n    \"\"\"Example of safe operations with error handling\"\"\"\n    try:\n        # Potentially risky operation\n        data = self.Cache.ReadCacheFile(\"important_data.json\")\n        result = self.ProcessImportantData(data)\n\n        # Log success\n        self.Log.WriteLog(\"app.log\", \"Important operation completed successfully\")\n        return result\n\n    except FileNotFoundError:\n        self.Log.WriteLog(\"error.log\", \"Important data file not found\")\n        return self.CreateDefaultData()\n\n    except json.JSONDecodeError:\n        self.Log.WriteLog(\"error.log\", \"Invalid JSON in data file\")\n        return self.CreateDefaultData()\n\n    except Exception as e:\n        self.Log.WriteLog(\"error.log\", f\"Unexpected error: {str(e)}\")\n        return None\n</code></pre>"},{"location":"en/getting-started/#background-tasks","title":"Background Tasks","text":"<pre><code>def StartBackgroundTasks(self):\n    \"\"\"Start background tasks for your application\"\"\"\n    import threading\n    import time\n\n    def AutoSaveTask():\n        while self.StateMachine.GetState() != \"exit\":\n            if self.AppConfig.get(\"auto_save\", True):\n                self.SaveApplicationState()\n                self.Log.WriteLog(\"app.log\", \"Auto-save completed\")\n            time.sleep(300)  # Save every 5 minutes\n\n    # Start background thread\n    auto_save_thread = threading.Thread(target=AutoSaveTask, daemon=True)\n    auto_save_thread.start()\n</code></pre>"},{"location":"en/getting-started/#next-steps","title":"\ud83d\udce6 Next Steps","text":"<p>Now that you have your first ToolOS application running:</p> <ol> <li>Engine API - Learn about all available APIs</li> <li>API Reference - Complete method documentation</li> <li>Modding SDK - Create extensions and mods</li> </ol>"},{"location":"en/getting-started/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Always use inheritance from <code>engine.Api</code></li> <li>Initialize logging early in your application</li> <li>Use state machines for clean application flow</li> <li>Handle errors gracefully with try-catch blocks</li> <li>Cache frequently used data for better performance</li> <li>Support multiple languages from the start</li> <li>Clean up resources in your exit handler</li> </ol>"},{"location":"en/getting-started/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"en/getting-started/#common-issues","title":"Common Issues","text":"<p>Q: \"Module not found\" error A: Make sure ToolOS SDK is in your Python path or copy the toolos module to your project directory.</p> <p>Q: Language files not loading A: Check that your language files are in <code>data/lang/</code> directory and are valid JSON.</p> <p>Q: Settings not persisting A: Call <code>self.Settings.Save()</code> after making changes to settings.</p> <p>Q: Cache files not found A: Use <code>self.Cache.CacheExists()</code> before reading cache files.</p> <p>Ready to build more advanced features? Check out our Engine API documentation! \ud83d\ude80</p>"},{"location":"en/modding-sdk/","title":"Modding SDK","text":"<p>Create your own mods and extensions for ToolOS-based applications!</p>"},{"location":"en/modding-sdk/#what-are-mods","title":"\ud83c\udfae What are Mods?","text":"<p>Mods are standalone modules that can be loaded into ToolOS apps. They extend functionality without modifying core code.</p>"},{"location":"en/modding-sdk/#example-shopping-mod-from-your-codebase","title":"Example: Shopping Mod from your Codebase","text":"<pre><code>import sys\nimport os\nsrc_path = os.path.dirname(os.path.abspath(__file__))\nsys.path.insert(0, src_path)\nimport engine.engine as engine\n\nclass Menu():\n    def __init__(self, app):\n        self.app = app\n        self.MENU = [\n            self.app.language.Translate(\"new_shopping\"), \n            self.app.language.Translate(\"exit\")\n        ]\n        self.ShowHeader()\n\n    def ShowHeader(self):\n        print(self.app.language.Translate(\"header\"))\n        print()\n\n    def ShowMainMenu(self):\n        self.app.state.SetNewState(self.app.state.types.MAIN_MENU)\n        for i, key in enumerate(self.MENU):\n            print(f\"{i}. {key}\")\n        print()\n\n        choice = input(self.app.language.Translate(\"input\"))\n        for i, key in enumerate(self.MENU):\n            if choice == str(i):\n                if i == 0:  # New Shopping\n                    self.StartShopping()\n                elif i == 1:  # Exit\n                    self.app.state.SetNewState(self.app.state.types.EXIT)\n</code></pre>"},{"location":"en/modding-sdk/#mod-structure","title":"\ud83d\udcc1 Mod Structure","text":"<pre><code>MyMod/\n\u251c\u2500\u2500 package.json          # Mod information\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 lang/            # Translations\n\u2502       \u251c\u2500\u2500 de.json\n\u2502       \u251c\u2500\u2500 en.json\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 app.py           # Main mod file\n    \u2514\u2500\u2500 engine/\n        \u2514\u2500\u2500 engine.py    # Mod engine (optional)\n</code></pre>"},{"location":"en/modding-sdk/#packagejson","title":"\ud83d\udccb package.json","text":"<pre><code>{\n    \"name\": \"Shopping Simulator\",\n    \"version\": \"2.0.4\",\n    \"author\": \"Your Name\",\n    \"description\": \"A realistic shopping experience simulator\",\n    \"main\": \"src/app.py\",\n    \"languages\": [\"de\", \"en\", \"fr\", \"es\"],\n    \"dependencies\": [],\n    \"type\": \"mod\"\n}\n</code></pre>"},{"location":"en/modding-sdk/#multi-language-support","title":"\ud83c\udf0d Multi-Language Support","text":""},{"location":"en/modding-sdk/#translation-files","title":"Translation Files","text":"<p>data/lang/de.json: <pre><code>{\n    \"header\": \"=== Shopping Simulator ===\",\n    \"new_shopping\": \"New Shopping\",\n    \"shopping_cart\": \"Shopping Cart\",\n    \"total_price\": \"Total Price\",\n    \"checkout\": \"Checkout\",\n    \"exit\": \"Exit\",\n    \"input\": \"Input: &gt; \"\n}\n</code></pre></p> <p>data/lang/en.json: <pre><code>{\n    \"header\": \"=== Shopping Simulator ===\",\n    \"new_shopping\": \"New Shopping\",\n    \"shopping_cart\": \"Shopping Cart\", \n    \"total_price\": \"Total Price\",\n    \"checkout\": \"Checkout\",\n    \"exit\": \"Exit\",\n    \"input\": \"Input: &gt; \"\n}\n</code></pre></p>"},{"location":"en/modding-sdk/#loading-languages-in-mods","title":"Loading Languages in Mods","text":"<pre><code>class ShoppingApp():\n    def __init__(self, api):\n        self.api = api\n        self.language = api.Language\n\n        # Load mod-specific translations\n        self.LoadModLanguages()\n\n    def LoadModLanguages(self):\n        import os\n        lang_path = os.path.join(os.path.dirname(__file__), \"../data/lang\")\n        current_lang = self.api.Settings.LANGUAGE\n\n        lang_file = os.path.join(lang_path, f\"{current_lang}.json\")\n        if os.path.exists(lang_file):\n            self.language.AddLanguagePackage(current_lang, lang_file)\n            self.language.Reload()\n</code></pre>"},{"location":"en/modding-sdk/#creating-mod-engine","title":"\ud83d\udd27 Creating Mod Engine","text":"<p>For complex mods, you can create your own engine:</p> <pre><code># src/engine/engine.py\nimport toolos as base_engine\n\nclass ModEngine(base_engine.Api):\n    def __init__(self, settings_path):\n        super().__init__(settings_path)\n        self.ModName = \"Shopping Simulator\"\n        self.ModVersion = \"2.0.4\"\n\n    def InitializeMod(self):\n        \"\"\"Mod-specific initialization\"\"\"\n        self.Log.WriteLog(\"mod.log\", f\"{self.ModName} v{self.ModVersion} loaded\")\n\n        # Load mod configuration\n        if self.Cache.CacheExists(\"mod_config.json\"):\n            import json\n            config_data = self.Cache.ReadCacheFile(\"mod_config.json\")\n            self.ModConfig = json.loads(config_data)\n        else:\n            self.CreateDefaultConfig()\n\n    def CreateDefaultConfig(self):\n        \"\"\"Create default mod configuration\"\"\"\n        import json\n        default_config = {\n            \"difficulty\": \"normal\",\n            \"currency\": \"USD\",\n            \"shop_items\": 50,\n            \"enable_discounts\": True\n        }\n\n        config_data = json.dumps(default_config, indent=2)\n        self.Cache.WriteCacheFile(\"mod_config.json\", config_data)\n        self.ModConfig = default_config\n</code></pre>"},{"location":"en/modding-sdk/#state-management-in-mods","title":"\ud83c\udfaf State Management in Mods","text":"<pre><code>class ShoppingStates:\n    SHOPPING_MENU = \"shopping_menu\"\n    BROWSING_ITEMS = \"browsing_items\"\n    IN_CART = \"in_cart\"\n    CHECKOUT = \"checkout\"\n    PAYMENT = \"payment\"\n\nclass ShoppingMod(ModEngine):\n    def __init__(self):\n        super().__init__(\"settings.json\")\n        self.States = ShoppingStates()\n        self.ShoppingCart = []\n        self.TotalPrice = 0.0\n\n    def Run(self):\n        self.StateMachine.SetState(self.States.SHOPPING_MENU)\n\n        while True:\n            if self.StateMachine.IsState(self.States.SHOPPING_MENU):\n                self.ShowShoppingMenu()\n            elif self.StateMachine.IsState(self.States.BROWSING_ITEMS):\n                self.BrowseItems()\n            elif self.StateMachine.IsState(self.States.CHECKOUT):\n                self.ProcessCheckout()\n            elif self.StateMachine.IsState(self.StateMachine.EXIT):\n                break\n</code></pre>"},{"location":"en/modding-sdk/#managing-mod-data","title":"\ud83d\udcbe Managing Mod Data","text":"<pre><code>class ShoppingData:\n    def __init__(self, mod_engine):\n        self.engine = mod_engine\n\n    def SaveShoppingSession(self, cart_items, total):\n        \"\"\"Save shopping session\"\"\"\n        import json\n        session_data = {\n            \"timestamp\": self.GetCurrentTimestamp(),\n            \"items\": cart_items,\n            \"total\": total,\n            \"currency\": self.engine.ModConfig.get(\"currency\", \"USD\")\n        }\n\n        filename = f\"shopping_session_{session_data['timestamp']}.json\"\n        self.engine.Cache.WriteCacheFile(filename, json.dumps(session_data, indent=2))\n        self.engine.Log.WriteLog(\"shopping.log\", f\"Session saved: {total} {session_data['currency']}\")\n\n    def LoadShoppingSessions(self):\n        \"\"\"Load all shopping sessions\"\"\"\n        sessions = []\n        # Implementation to load all session files\n        return sessions\n\n    def GetCurrentTimestamp(self):\n        import datetime\n        return datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n</code></pre>"},{"location":"en/modding-sdk/#mod-loading-system","title":"\ud83d\ude80 Mod Loading System","text":"<p>How the main app loads your mods:</p> <pre><code># In main app loader\nclass ModLoader:\n    def __init__(self, settings):\n        self.settings = settings\n        self.LoadedMods = []\n\n    def LoadMods(self):\n        import os\n        import json\n\n        mod_path = self.settings.Global(\"modpath\")\n        if not os.path.exists(mod_path):\n            return\n\n        for mod_folder in os.listdir(mod_path):\n            package_file = os.path.join(mod_path, mod_folder, \"package.json\")\n            if os.path.exists(package_file):\n                with open(package_file, 'r', encoding='utf-8') as f:\n                    mod_info = json.load(f)\n\n                self.LoadMod(mod_folder, mod_info)\n\n    def LoadMod(self, folder_name, mod_info):\n        \"\"\"Load individual mod\"\"\"\n        mod_entry = {\n            \"build\": {\n                \"mesh\": f\"{mod_info['name']} v{mod_info['version']}\",\n                \"source\": mod_info[\"main\"],\n                \"action\": \"start\",\n                \"path\": folder_name,\n                \"method\": \"main\"\n            }\n        }\n        self.LoadedMods.append(mod_entry)\n</code></pre>"},{"location":"en/modding-sdk/#mod-examples","title":"\ud83d\udcda Mod Examples","text":""},{"location":"en/modding-sdk/#1-terminal-mod","title":"1. Terminal Mod","text":"<pre><code># Simple terminal emulator\nclass TerminalMod(ModEngine):\n    def RunCommand(self, command):\n        import subprocess\n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        return result.stdout\n</code></pre>"},{"location":"en/modding-sdk/#2-task-manager-mod","title":"2. Task Manager Mod","text":"<pre><code># Task management\nclass TaskManagerMod(ModEngine):\n    def AddTask(self, title, priority=\"normal\"):\n        task = {\n            \"id\": self.GenerateTaskId(),\n            \"title\": title,\n            \"priority\": priority,\n            \"created\": self.GetCurrentTimestamp(),\n            \"completed\": False\n        }\n        self.SaveTask(task)\n</code></pre>"},{"location":"en/modding-sdk/#best-practices-for-mods","title":"\ud83d\udee0\ufe0f Best Practices for Mods","text":"<ol> <li>Own Language Packages: Use the multi-language system</li> <li>State Management: Use StateMachine for clean flow</li> <li>Persist Data: Use Cache/Temp APIs for mod data</li> <li>Logging: Log important mod events</li> <li>Error Handling: Robust error handling implementation</li> <li>Configurable: Load mod settings from JSON files</li> <li>Performance: Use efficient data structures</li> </ol>"},{"location":"en/modding-sdk/#publishing-mods","title":"\ud83c\udf89 Publishing Mods","text":"<ol> <li>Testing: Test thoroughly in different languages</li> <li>Documentation: README with installation and usage</li> <li>Versioning: Use semantic versioning</li> <li>Package.json: Complete mod information</li> <li>Examples: Code examples for other developers</li> </ol>"}]}